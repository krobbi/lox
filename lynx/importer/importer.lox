// Imports a program AST from configuration.
class Importer {
	// Initialize the importer from its configuration.
	init(config) {
		var mainPath = config.getMainPath();
		var mainName = "";
		
		{
			var length = __strlen(mainPath);
			var pivot = length - 1;
			
			for (var isLooping = true; isLooping;) {
				var char = __chrat(mainPath, pivot);
				
				if (char == Char.SLASH or char == Char.BACKSLASH) {
					isLooping = false;
				} else {
					pivot = pivot - 1;
					
					if (pivot < 0) {
						isLooping = false;
					}
				}
			}
			
			var path = "";
			
			for (var i = 0; i < length; i = i + 1) {
				var character = __strof(__chrat(mainPath, i));
				
				if (i <= pivot) {
					path = path + character;
				} else {
					mainName = mainName + character;
				}
			}
			
			mainPath = path;
		}
		
		var stdPath = config.getStdPath();
		
		if (stdPath and stdPath != "") {
			var char = __chrat(stdPath, __strlen(stdPath) - 1);
			
			if (char != Char.SLASH and char != Char.BACKSLASH) {
				stdPath = stdPath + "/";
			}
		}
		
		// The importer's configuration.
		this._config = config;
		
		// The importer's log.
		this._log = config.getLog();
		
		// The importer's main path.
		this._mainPath = mainPath;
		
		// The importer's main module name.
		this._mainName = mainName;
		
		// The importer's optional standard library path.
		this._stdPath = stdPath;
		
		// The importer's map of dependency names to dependencies.
		this._dependencies = Map();
	}
	
	// Import a program or log an error message.
	importProgram() {
		if (!this._validatePart(this._mainName)) {
			this._log.logError("Main path '" + this._config.getMainPath() + "' is invalid.");
			return nil;
		}
		
		var main = this._getDependency(this._mainName, nil);
		
		if (!main) {
			return nil;
		}
		
		return ProgramNode(this._resolveDependency(main));
	}
	
	// Get a dependency from its name or log an error message at a span.
	_getDependency(name, span) {
		var dependency = this._dependencies.get(name);
		
		if (dependency) {
			return dependency;
		}
		
		var path = this._nameToPath(name);
		var stream = __fopenr(path);
		
		if (!stream) {
			this._log.logErrorAt(
					"Could not open source file '" + path + "'. File may not exist.", span);
			return nil;
		}
		
		dependency = Dependency(name, Parser(this._config, name, stream).parseModule());
		this._dependencies.set(name, dependency);
		return dependency;
	}
	
	// Convert a dependency name to a path.
	_nameToPath(name) {
		return this._mainPath + name;
	}
	
	// Get whether a path part is valid.
	_validatePart(part) {
		if (part == "" or __chrat(part, 0) == Char.SPACE) {
			return false;
		}
		
		var length = __strlen(part);
		
		{
			var tail = __chrat(part, length - 1);
			
			if (tail == Char.SPACE or tail == Char.DOT) {
				return false;
			}
		}
		
		var prev = nil;
		
		for (var i = 0; i < length; i = i + 1) {
			var char = __chrat(part, i);
			
			if (
					char < Char.SPACE or char > Char.TILDE
					or char == Char.QUOTE
					or char == Char.STAR
					or char == Char.SLASH
					or char == Char.COLON
					or char == Char.LESS
					or char == Char.GREATER
					or char == Char.QUESTION
					or char == Char.BACKSLASH
					or char == Char.CARET
					or char == Char.PIPE
					or char == prev and (char == Char.SPACE or char == Char.DOT)) {
				return false;
			}
			
			prev = char;
		}
		
		return true;
	}
	
	// Split a path into path parts.
	_splitPath(path) {
		var length = __strlen(path);
		var parts = List();
		var part = "";
		
		for (var i = 0; i < length; i = i + 1) {
			var char = __chrat(path, i);
			
			if (char == Char.SLASH or char == Char.BACKSLASH) {
				parts.pushBack(part);
				part = "";
			} else {
				part = part + __strof(char);
			}
		}
		
		return parts.pushBack(part);
	}
	
	// Convert a path at a base dependency name to a dependency name or log an
	// error message at a span.
	_pathToName(path, base, span) {
		// Log an error message at the span and return nil.
		fun error(message) {
			this._log.logErrorAt(message, span);
			return nil;
		}
		
		path = this._splitPath(path);
		base = this._splitPath(base);
		var iter = path.iter();
		
		// Make the path absolute if it has a leading slash.
		if (path.get(0) == "") {
			base.clear();
			iter.getNext();
		} else {
			base.popBack();
		}
		
		if (!iter.hasNext()) {
			return error("Import path is empty.");
		}
		
		var isFile = false;
		
		while (iter.hasNext()) {
			var part = iter.getNext();
			
			if (part == "") {
				if (iter.hasNext()) {
					return error("Import path contains an empty part.");
				}
				
				isFile = false;
			} else if (part == ".") {
				isFile = false;
			} else if (part == "..") {
				if (base.isEmpty()) {
					return error("Import path ascends above the main directory.");
				}
				
				base.popBack();
				isFile = false;
			} else if (this._validatePart(part)) {
				base.pushBack(part);
				isFile = true;
			} else {
				return error("Import path contains an invalid part.");
			}
		}
		
		if (!isFile) {
			return error("Import path is not a file.");
		}
		
		var name = "";
		
		for (var iter = base.iter(); iter.hasNext();) {
			name = name + iter.getNext();
			
			if (iter.hasNext()) {
				name = name + "/";
			}
		}
		
		return name;
	}
	
	// Resolve an import node's optional modules at a base dependency name in
	// topological order.
	_resolveImport(import, base) {
		var span = import.getSpan();
		var name = this._pathToName(import.getPath(), base, span);
		
		if (!name) {
			return nil;
		}
		
		var dependency = this._getDependency(name, span);
		
		if (!dependency) {
			return nil;
		}
		
		if (dependency.state == DependencyState.UNRESOLVED) {
			return this._resolveDependency(dependency);
		} else if (dependency.state == DependencyState.RESOLVING) {
			this._log.logErrorAt("Import forms a circular dependency.", span);
		}
		
		return nil;
	}
	
	// Resolve a dependency's modules in topological order.
	_resolveDependency(dependency) {
		dependency.state = DependencyState.RESOLVING;
		var name = dependency.getName();
		var modules = List();
		
		for (var iter = dependency.getModule().getImports().iter(); iter.hasNext();) {
			var submodules = this._resolveImport(iter.getNext(), name);
			
			if (submodules) {
				for (var iter = submodules.iter(); iter.hasNext();) {
					modules.pushBack(iter.getNext());
				}
			}
		}
		
		dependency.state = DependencyState.RESOLVED;
		return modules.pushBack(dependency.getModule());
	}
}
