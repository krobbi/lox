// Run unit tests for lists.
fun testLists(t) {
	t.begin("New");
		var list = List();
		t.eq("has", list.has(nil), false);
		t.eq("peek", list.peekBack(), nil);
		t.eq("empty", list.isEmpty(), true);
		t.eq("length", list.getLength(), 0);
	t.end("New");
	
	t.begin("Stack");
		t.begin("Push");
			t.begin("Index 0");
				list.pushBack("Bottom pancake");
				t.eq("peek", list.peekBack(), "Bottom pancake");
				t.eq("empty", list.isEmpty(), false);
				t.eq("length", list.getLength(), 1);
			t.end("Index 0");
			
			t.begin("Index 1");
				list.pushBack("Middle pancake");
				t.eq("peek", list.peekBack(), "Middle pancake");
				t.eq("empty", list.isEmpty(), false);
				t.eq("length", list.getLength(), 2);
			t.end("Index 1");
			
			t.begin("Index 2");
				list.pushBack("Top pancake");
				t.eq("peek", list.peekBack(), "Top pancake");
				t.eq("empty", list.isEmpty(), false);
				t.eq("length", list.getLength(), 3);
			t.end("Index 2");
			
			t.begin("Index 3");
				list.pushBack("Syrup");
				t.eq("peek", list.peekBack(), "Syrup");
				t.eq("empty", list.isEmpty(), false);
				t.eq("length", list.getLength(), 4);
			t.end("Index 3");
		t.end("Push");
		
		// Indices shuffled to test random access.
		t.begin("Get");
			t.eq("index 1", list.get(1), "Middle pancake");
			t.eq("index 0", list.get(0), "Bottom pancake");
			t.eq("index 3", list.get(3), "Syrup");
			t.eq("index 2", list.get(2), "Top pancake");
		t.end("Get");
		
		t.begin("Has");
			t.eq("index 1", list.has("Middle pancake"), true);
			t.eq("index 0", list.has("Bottom pancake"), true);
			t.eq("index 3", list.has("Syrup"), true);
			t.eq("index 2", list.has("Top pancake"), true);
			
			t.begin("Missing");
				t.eq("nil", list.has(nil), false);
				t.eq("number", list.has(0), false);
				t.eq("case", list.has("syrup"), false);
			t.end("Missing");
		t.end("Has");
		
		// Set with fraction to test truncation.
		list.set(1.2, "Crepe");
		t.eq("has", list.has("Middle pancake"), false);
		t.eq("set", list.get(1.8), "Crepe");
		
		t.begin("Pop");
			t.begin("Index 3");
				t.eq("peek", list.peekBack(), "Syrup");
				t.eq("value", list.popBack(), "Syrup");
				t.eq("has", list.has("Syrup"), false);
				t.eq("empty", list.isEmpty(), false);
				t.eq("length", list.getLength(), 3);
			t.end("Index 3");
			
			t.begin("Index 2");
				t.eq("peek", list.peekBack(), "Top pancake");
				t.eq("value", list.popBack(), "Top pancake");
				t.eq("has", list.has("Top pancake"), false);
				t.eq("empty", list.isEmpty(), false);
				t.eq("length", list.getLength(), 2);
			t.end("Index 2");
			
			t.begin("Index 1");
				t.eq("peek", list.peekBack(), "Crepe");
				t.eq("value", list.popBack(), "Crepe");
				t.eq("has", list.has("Crepe"), false);
				t.eq("empty", list.isEmpty(), false);
				t.eq("length", list.getLength(), 1);
			t.end("Index 1");
			
			t.begin("Index 0");
				t.eq("peek", list.peekBack(), "Bottom pancake");
				t.eq("value", list.popBack(), "Bottom pancake");
				t.eq("has", list.has("Bottom pancake"), false);
				t.eq("empty", list.isEmpty(), true);
				t.eq("length", list.getLength(), 0);
			t.end("Index 0");
			
			t.begin("Empty");
				t.eq("peek", list.peekBack(), nil);
				t.eq("has", list.has(nil), false);
				t.eq("value", list.popBack(), nil);
				t.eq("empty", list.isEmpty(), true);
				t.eq("length", list.getLength(), 0);
			t.end("Empty");
		t.end("Pop");
	t.end("Stack");
	
	t.begin("Array");
		list.pushBack("foo");
		list.pushBack("bar");
		list.pushBack("baz");
		t.eq("empty", list.isEmpty(), false);
		t.eq("length", list.getLength(), 3);
		
		t.begin("Get");
			t.eq("index 0", list.get(0), "foo");
			t.eq("index 1", list.get(1), "bar");
			t.eq("index 2", list.get(2), "baz");
			
			t.begin("Fractional");
				t.begin("Index 0");
					t.eq(".01", list.get(0.01), "foo");
					t.eq(".25", list.get(0.25), "foo");
					t.eq(".5", list.get(0.5), "foo");
					t.eq(".75", list.get(0.75), "foo");
					t.eq(".99", list.get(0.99), "foo");
				t.end("Index 0");
				
				t.begin("Index 1");
					t.eq(".01", list.get(1.01), "bar");
					t.eq(".25", list.get(1.25), "bar");
					t.eq(".5", list.get(1.5), "bar");
					t.eq(".75", list.get(1.75), "bar");
					t.eq(".99", list.get(1.99), "bar");
				t.end("Index 1");
				
				t.begin("Index 2");
					t.eq(".01", list.get(2.01), "baz");
					t.eq(".25", list.get(2.25), "baz");
					t.eq(".5", list.get(2.5), "baz");
					t.eq(".75", list.get(2.75), "baz");
					t.eq(".99", list.get(2.99), "baz");
				t.end("Index 2");
			t.end("Fractional");
			
			t.begin("Below Bounds");
				t.eq("epsilon", list.get(-0.0000000001), nil);
				t.eq(".01", list.get(-0.01), nil);
				t.eq("1", list.get(-1), nil);
				t.eq("large", list.get(-1000000000), nil);
			t.end("Below Bounds");
			
			t.begin("Above Bounds");
				t.eq("0", list.get(3), nil);
				t.eq("epsilon", list.get(3.0000000001), nil);
				t.eq("1", list.get(4), nil);
				t.eq("large", list.get(1000000000), nil);
			t.end("Above Bounds");
		t.end("Get");
		
		t.begin("Set");
			list.set(1, "car");
			t.eq("value", list.get(1), "car");
			
			list.set(-0.0000000001, "Below");
			t.eq("below bounds", list.get(0), "foo");
			
			list.set(3, "Above");
			t.eq("above bounds", list.get(2), "baz");
		t.end("Set");
	t.end("Array");
	
	t.begin("Iterator");
		t.begin("Index 0");
			var iter = list.iter();
			t.eq("exists", iter.hasNext(), true);
			t.eq("value", iter.getNext(), "foo");
		t.end("Index 0");
		
		t.begin("Index 1");
			t.eq("exists", iter.hasNext(), true);
			t.eq("value", iter.getNext(), "car");
		t.end("Index 1");
		
		t.begin("Index 2");
			t.eq("exists", iter.hasNext(), true);
			t.eq("value", iter.getNext(), "baz");
		t.end("Index 2");
		
		t.begin("Above Bounds");
			t.eq("exists", iter.hasNext(), false);
			t.eq("value", iter.getNext(), nil);
		t.end("Above Bounds");
	t.end("Iterator");
	
	t.begin("Clear");
		list.clear();
		t.eq("empty", list.isEmpty(), true);
		t.eq("length", list.getLength(), 0);
	t.end("Clear");
}
