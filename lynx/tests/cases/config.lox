// Run unit tests for configuration.
fun testConfig(t) {
	// Parse configuration from an argument string.
	fun parseConfig(string) {
		var length = __strlen(string);
		var arg = "";
		var args = List();
		
		for (var i = 0; i < length; i = i + 1) {
			var character = __strof(__chrat(string, i));
			
			if (character == " ") {
				args.pushBack(arg);
				arg = "";
			} else {
				arg = arg + character;
			}
		}
		
		if (arg != "") {
			args.pushBack(arg);
		}
		
		return Config(args);
	}
	
	// Expect a configuration error.
	fun expectError(t, name, string) {
		t.eq(name, parseConfig(string).getLog().hasErrors(), true);
	}
	
	// Expect a valid configuration.
	fun expect(t, section, string, main, std, output) {
		var config = parseConfig("lynx.lox " + string);
		
		t.begin(section);
			t.eq("error", config.getLog().hasErrors(), false);
			t.eq("main", config.getMainPath(), main);
			t.eq("std", config.getStdPath(), std);
			t.eq("output", config.getOutputPath(), output);
		t.end(section);
	}
	
	// Expect a full valid configuration.
	fun expectFull(t, section, string) {
		expect(t, section, string, "main.lox", "std/", "out.lox");
	}
	
	t.begin("Errors");
		t.begin("Arguments");
			expectError(t, "none", "");
			expectError(t, "too few", "lynx.lox");
			expectError(t, "too many", "lynx.lox main.lox lib.lox");
			expectError(t, "reescaped", "lynx.lox -- -- main.lox");
			expectError(t, "unescaped", "lynx.lox -- --std std/ main.lox");
		t.end("Arguments");
		
		t.begin("Options");
			expectError(t, "unexpected", "lynx.lox --standard std/ main.lox");
			expectError(t, "no value", "lynx.lox main.lox --std");
			expectError(t, "redefined", "lynx.lox --std std/ --std std2/ main.lox");
		t.end("Options");
	t.end("Errors");
	
	expect(t, "Minimum", "main.lox", "main.lox", nil, nil);
	expect(t, "Escaped", "-- --std", "--std", nil, nil);
	
	expect(
			t, "Repeated", "--std --std --output --output -- main.lox",
			"main.lox", "--std", "--output");
	
	expect(t, "Std Pre", "--std std/ main.lox", "main.lox", "std/", nil);
	expect(t, "Std Post", "main.lox --std std/", "main.lox", "std/", nil);
	expect(t, "Std Separated", "--std std/ -- main.lox", "main.lox", "std/", nil);
	expect(t, "Output Pre", "--output out.lox main.lox", "main.lox", nil, "out.lox");
	expect(t, "Output Post", "main.lox --output out.lox", "main.lox", nil, "out.lox");
	expect(t, "Output Separated", "--output out.lox -- main.lox", "main.lox", nil, "out.lox");
	expectFull(t, "Mixed", "--std std/ main.lox --output out.lox");
	expectFull(t, "Reversed Pre", "--output out.lox --std std/ main.lox");
	expectFull(t, "Reversed Post", "main.lox --output out.lox --std std/");
	expectFull(t, "Reversed Separated", "--output out.lox --std std/ -- main.lox");
	expectFull(t, "Full Pre", "--std std/ --output out.lox main.lox");
	expectFull(t, "Full Post", "main.lox --std std/ --output out.lox");
	expectFull(t, "Full Separated", "--std std/ --output out.lox -- main.lox");
}
