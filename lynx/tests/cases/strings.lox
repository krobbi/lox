// Run unit tests for strings.
fun testStrings(t) {
	// Reverse a string.
	fun reverse(string) {
		var result = "";
		
		for (var i = __strlen(string) - 1; i >= 0; i = i - 1) {
			result = result + __strof(__chrat(string, i));
		}
		
		return result;
	}
	
	t.begin("Concatenation");
		t.eq("basic", "Foo" + "bar", "Foobar");
		t.eq("compound", "Hello" + "," + " " + "world" + "!", "Hello, world!");
		t.eq("empty and string", "Any" + "" + "way", "Anyway");
		t.eq("empty and empty", "" + "", "");
	t.end("Concatenation");
	
	t.begin("Length");
		t.eq("ascii", __strlen("Line"), 4);
		t.eq("utf-8", __strlen("Café"), 5);
		t.eq("empty", __strlen(""), 0);
		
		t.begin("Invalid Arguments");
			t.eq("not enough", __strlen(), nil);
			t.eq("too many", __strlen("Too", "many"), nil);
			t.eq("nil", __strlen(nil), nil);
			t.eq("true", __strlen(true), nil);
			t.eq("false", __strlen(false), nil);
			t.eq("number", __strlen(123), nil);
			t.eq("object", __strlen(reverse), nil);
		t.end("Invalid Arguments");
	t.end("Length");
	
	t.begin("From Character");
		t.eq("printable", __strof(65), "A");
		t.eq("space", __strof(32), " ");
		
		t.begin("Fractional");
			t.eq(".4", __strof(66.4), "B");
			t.eq(".8", __strof(67.8), "C");
		t.end("Fractional");
		
		t.begin("Boundary");
			t.eq("lower", __strlen(__strof(1)), 1);
			t.eq("upper", __strlen(__strof(255.999999999)), 1);
		t.end("Boundary");
		
		t.begin("Below Bounds");
			t.eq("epsilon", __strof(0.999999999), nil);
			t.eq(".01", __strof(0.99), nil);
			t.eq("1", __strof(0), nil);
			t.eq("large", __strof(-1000000000), nil);
		t.end("Below Bounds");
		
		t.begin("Above Bounds");
			t.eq("0", __strof(256), nil);
			t.eq("epsilon", __strof(256.0000000001), nil);
			t.eq("1", __strof(257), nil);
			t.eq("large", __strof(1000000000), nil);
		t.end("Above Bounds");
		
		t.begin("Invalid Arguments");
			t.eq("not enough", __strof(), nil);
			t.eq("too many", __strof(65, 66), nil);
			t.eq("nil", __strof(nil), nil);
			t.eq("true", __strof(true), nil);
			t.eq("false", __strof(false), nil);
			t.eq("string", __strof("String"), nil);
			t.eq("object", __strof(reverse), nil);
		t.end("Invalid Arguments");
	t.end("From Character");
	
	t.begin("To Character");
		t.eq("start", __chrat("ABC", 0), 65);
		t.eq("middle", __chrat("Hi!", 1), 105);
		t.eq("end", __chrat("Bye!", 3), 33);
		
		t.begin("Fractional");
			t.eq(".01", __chrat("<=>", 1.01), 61);
			t.eq(".25", __chrat("<=>", 1.25), 61);
			t.eq(".5", __chrat("<=>", 1.5), 61);
			t.eq(".75", __chrat("<=>", 1.75), 61);
			t.eq(".99", __chrat("<=>", 1.99), 61);
		t.end("Fractional");
		
		t.begin("UTF-8");
			t.eq("high", __chrat("é", 0), 195);
			t.eq("low", __chrat("é", 1), 169);
			t.eq("above bounds", __chrat("é", 2), nil);
		t.end("UTF-8");
		
		t.begin("Round Trip");
			t.eq("string", __strof(__chrat("Round", 1)), "o");
			t.eq("unsigned", __chrat(__strof(100), 0), 100);
			t.eq("signed", __chrat(__strof(200), 0), 200);
		t.end("Round Trip");
		
		t.begin("Empty");
			t.eq("start", __chrat("", 0), nil);
			t.eq("below bounds", __chrat("", -1), nil);
			t.eq("above bounds", __chrat("", 1), nil);
		t.end("Empty");
		
		t.begin("Below Bounds");
			// There is a strange edge case here. Integer parameters to
			// extension functions are truncated, so `-0.x` becomes `0`. This is
			// technically behaving as documented, but could cause confusion.
			// This 'feature' caught me out while writing this test.
			t.eq("epsilon", __chrat("Below", -0.0000000001), 66);
			t.eq(".01", __chrat("Below", -0.01), 66);
			t.eq(".25", __chrat("Below", -0.25), 66);
			t.eq(".5", __chrat("Below", -0.5), 66);
			t.eq(".75", __chrat("Below", -0.75), 66);
			t.eq(".99", __chrat("Below", -0.99), 66);
			t.eq("lower", __chrat("Below", -0.999999999), 66);
			
			// These indices are below bounds as expected.
			t.eq("1", __chrat("Below", -1), nil);
			t.eq("large", __chrat("Below", -1000000000), nil);
		t.end("Below Bounds");
		
		t.begin("Above Bounds");
			t.eq("0", __chrat("Above", 5), nil);
			t.eq("epsilon", __chrat("Above", 5.0000000001), nil);
			t.eq("1", __chrat("Above", 6), nil);
			t.eq("large", __chrat("Above", 1000000000), nil);
		t.end("Above Bounds");
		
		t.begin("Invalid Arguments");
			t.eq("none", __chrat(), nil);
			t.eq("not enough", __chrat("Not enough"), nil);
			t.eq("too many", __chrat("Too many", 1, 2), nil);
			t.eq("reversed", __chrat(0, "Reversed"), nil);
			
			t.begin("String");
				t.eq("nil", __chrat(nil, 0), nil);
				t.eq("true", __chrat(true, 0), nil);
				t.eq("false", __chrat(false, 0), nil);
				t.eq("number", __chrat(123, 0), nil);
				t.eq("object", __chrat(reverse, 0), nil);
			t.end("String");
			
			t.begin("Index");
				t.eq("nil", __chrat("String", nil), nil);
				t.eq("true", __chrat("String", true), nil);
				t.eq("false", __chrat("String", false), nil);
				t.eq("string", __chrat("String", "String"), nil);
				t.eq("object", __chrat("String", reverse), nil);
			t.end("Index");
		t.end("Invalid Arguments");
	t.end("To Character");
	
	t.eq("reverse", reverse("Backwards!"), "!sdrawkcaB");
}
