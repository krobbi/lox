// Run unit tests for tokens.
fun testTokens(t) {
	t.begin("Names");
		t.eq("'('", TokenType.getName(TokenType.LEFT_PAREN), "'('");
		t.eq("')'", TokenType.getName(TokenType.RIGHT_PAREN), "')'");
		t.eq("'{'", TokenType.getName(TokenType.LEFT_BRACE), "'{'");
		t.eq("'}'", TokenType.getName(TokenType.RIGHT_BRACE), "'}'");
		t.eq("','", TokenType.getName(TokenType.COMMA), "','");
		t.eq("'.'", TokenType.getName(TokenType.DOT), "'.'");
		t.eq("'-'", TokenType.getName(TokenType.MINUS), "'-'");
		t.eq("'+'", TokenType.getName(TokenType.PLUS), "'+'");
		t.eq("';'", TokenType.getName(TokenType.SEMICOLON), "';'");
		t.eq("'/'", TokenType.getName(TokenType.SLASH), "'/'");
		t.eq("'*'", TokenType.getName(TokenType.STAR), "'*'");
		t.eq("'!'", TokenType.getName(TokenType.BANG), "'!'");
		t.eq("'!='", TokenType.getName(TokenType.BANG_EQUAL), "'!='");
		t.eq("'='", TokenType.getName(TokenType.EQUAL), "'='");
		t.eq("'=='", TokenType.getName(TokenType.EQUAL_EQUAL), "'=='");
		t.eq("'>'", TokenType.getName(TokenType.GREATER), "'>'");
		t.eq("'>='", TokenType.getName(TokenType.GREATER_EQUAL), "'>='");
		t.eq("'<'", TokenType.getName(TokenType.LESS), "'<'");
		t.eq("'<='", TokenType.getName(TokenType.LESS_EQUAL), "'<='");
		t.eq("identifier", TokenType.getName(TokenType.IDENTIFIER), "identifier");
		t.eq("string", TokenType.getName(TokenType.STRING), "string");
		t.eq("number", TokenType.getName(TokenType.NUMBER), "number");
		t.eq("'and'", TokenType.getName(TokenType.AND), "'and'");
		t.eq("'class'", TokenType.getName(TokenType.CLASS), "'class'");
		t.eq("'else'", TokenType.getName(TokenType.ELSE), "'else'");
		t.eq("'false'", TokenType.getName(TokenType.FALSE), "'false'");
		t.eq("'for'", TokenType.getName(TokenType.FOR), "'for'");
		t.eq("'fun'", TokenType.getName(TokenType.FUN), "'fun'");
		t.eq("'if'", TokenType.getName(TokenType.IF), "'if'");
		t.eq("'nil'", TokenType.getName(TokenType.NIL), "'nil'");
		t.eq("'or'", TokenType.getName(TokenType.OR), "'or'");
		t.eq("'print'", TokenType.getName(TokenType.PRINT), "'print'");
		t.eq("'return'", TokenType.getName(TokenType.RETURN), "'return'");
		t.eq("'super'", TokenType.getName(TokenType.SUPER), "'super'");
		t.eq("'this'", TokenType.getName(TokenType.THIS), "'this'");
		t.eq("'true'", TokenType.getName(TokenType.TRUE), "'true'");
		t.eq("'var'", TokenType.getName(TokenType.VAR), "'var'");
		t.eq("'while'", TokenType.getName(TokenType.WHILE), "'while'");
		t.eq("error", TokenType.getName(TokenType.ERROR), "error");
		t.eq("end-of-file", TokenType.getName(TokenType.EOF), "end-of-file");
		t.eq("unknown", TokenType.getName(-1), "unknown");
	t.end("Names");
	
	t.begin("Lexemes");
		t.eq("'('", TokenType.getLexeme(TokenType.LEFT_PAREN), "(");
		t.eq("')'", TokenType.getLexeme(TokenType.RIGHT_PAREN), ")");
		t.eq("'{'", TokenType.getLexeme(TokenType.LEFT_BRACE), "{");
		t.eq("'}'", TokenType.getLexeme(TokenType.RIGHT_BRACE), "}");
		t.eq("','", TokenType.getLexeme(TokenType.COMMA), ",");
		t.eq("'.'", TokenType.getLexeme(TokenType.DOT), ".");
		t.eq("'-'", TokenType.getLexeme(TokenType.MINUS), "-");
		t.eq("'+'", TokenType.getLexeme(TokenType.PLUS), "+");
		t.eq("';'", TokenType.getLexeme(TokenType.SEMICOLON), ";");
		t.eq("'/'", TokenType.getLexeme(TokenType.SLASH), "/");
		t.eq("'*'", TokenType.getLexeme(TokenType.STAR), "*");
		t.eq("'!'", TokenType.getLexeme(TokenType.BANG), "!");
		t.eq("'!='", TokenType.getLexeme(TokenType.BANG_EQUAL), "!=");
		t.eq("'='", TokenType.getLexeme(TokenType.EQUAL), "=");
		t.eq("'=='", TokenType.getLexeme(TokenType.EQUAL_EQUAL), "==");
		t.eq("'>'", TokenType.getLexeme(TokenType.GREATER), ">");
		t.eq("'>='", TokenType.getLexeme(TokenType.GREATER_EQUAL), ">=");
		t.eq("'<'", TokenType.getLexeme(TokenType.LESS), "<");
		t.eq("'<='", TokenType.getLexeme(TokenType.LESS_EQUAL), "<=");
		t.eq("identifier", TokenType.getLexeme(TokenType.IDENTIFIER), nil);
		t.eq("string", TokenType.getLexeme(TokenType.STRING), nil);
		t.eq("number", TokenType.getLexeme(TokenType.NUMBER), nil);
		t.eq("'and'", TokenType.getLexeme(TokenType.AND), "and");
		t.eq("'class'", TokenType.getLexeme(TokenType.CLASS), "class");
		t.eq("'else'", TokenType.getLexeme(TokenType.ELSE), "else");
		t.eq("'false'", TokenType.getLexeme(TokenType.FALSE), "false");
		t.eq("'for'", TokenType.getLexeme(TokenType.FOR), "for");
		t.eq("'fun'", TokenType.getLexeme(TokenType.FUN), "fun");
		t.eq("'if'", TokenType.getLexeme(TokenType.IF), "if");
		t.eq("'nil'", TokenType.getLexeme(TokenType.NIL), "nil");
		t.eq("'or'", TokenType.getLexeme(TokenType.OR), "or");
		t.eq("'print'", TokenType.getLexeme(TokenType.PRINT), "print");
		t.eq("'return'", TokenType.getLexeme(TokenType.RETURN), "return");
		t.eq("'super'", TokenType.getLexeme(TokenType.SUPER), "super");
		t.eq("'this'", TokenType.getLexeme(TokenType.THIS), "this");
		t.eq("'true'", TokenType.getLexeme(TokenType.TRUE), "true");
		t.eq("'var'", TokenType.getLexeme(TokenType.VAR), "var");
		t.eq("'while'", TokenType.getLexeme(TokenType.WHILE), "while");
		t.eq("error", TokenType.getLexeme(TokenType.ERROR), nil);
		t.eq("end-of-file", TokenType.getLexeme(TokenType.EOF), nil);
		t.eq("unknown", TokenType.getLexeme(-1), nil);
	t.end("Lexemes");
	
	t.begin("Values");
		t.eq("'('", TokenType.LEFT_PAREN, 0);
		t.eq("')'", TokenType.RIGHT_PAREN, 1);
		t.eq("'{'", TokenType.LEFT_BRACE, 2);
		t.eq("'}'", TokenType.RIGHT_BRACE, 3);
		t.eq("','", TokenType.COMMA, 4);
		t.eq("'.'", TokenType.DOT, 5);
		t.eq("'-'", TokenType.MINUS, 6);
		t.eq("'+'", TokenType.PLUS, 7);
		t.eq("';'", TokenType.SEMICOLON, 8);
		t.eq("'/'", TokenType.SLASH, 9);
		t.eq("'*'", TokenType.STAR, 10);
		t.eq("'!'", TokenType.BANG, 11);
		t.eq("'!='", TokenType.BANG_EQUAL, 12);
		t.eq("'='", TokenType.EQUAL, 13);
		t.eq("'=='", TokenType.EQUAL_EQUAL, 14);
		t.eq("'>'", TokenType.GREATER, 15);
		t.eq("'>='", TokenType.GREATER_EQUAL, 16);
		t.eq("'<'", TokenType.LESS, 17);
		t.eq("'<='", TokenType.LESS_EQUAL, 18);
		t.eq("identifier", TokenType.IDENTIFIER, 19);
		t.eq("string", TokenType.STRING, 20);
		t.eq("number", TokenType.NUMBER, 21);
		t.eq("'and'", TokenType.AND, 22);
		t.eq("'class'", TokenType.CLASS, 23);
		t.eq("'else'", TokenType.ELSE, 24);
		t.eq("'false'", TokenType.FALSE, 25);
		t.eq("'for'", TokenType.FOR, 26);
		t.eq("'fun'", TokenType.FUN, 27);
		t.eq("'if'", TokenType.IF, 28);
		t.eq("'nil'", TokenType.NIL, 29);
		t.eq("'or'", TokenType.OR, 30);
		t.eq("'print'", TokenType.PRINT, 31);
		t.eq("'return'", TokenType.RETURN, 32);
		t.eq("'super'", TokenType.SUPER, 33);
		t.eq("'this'", TokenType.THIS, 34);
		t.eq("'true'", TokenType.TRUE, 35);
		t.eq("'var'", TokenType.VAR, 36);
		t.eq("'while'", TokenType.WHILE, 37);
		t.eq("error", TokenType.ERROR, 38);
		t.eq("end-of-file", TokenType.EOF, 39);
	t.end("Values");
	
	t.begin("Characters");
		t.eq("(", TokenType.fromChar(__chrat("(", 0)), TokenType.LEFT_PAREN);
		t.eq(")", TokenType.fromChar(__chrat(")", 0)), TokenType.RIGHT_PAREN);
		t.eq("{", TokenType.fromChar(__chrat("{", 0)), TokenType.LEFT_BRACE);
		t.eq("}", TokenType.fromChar(__chrat("}", 0)), TokenType.RIGHT_BRACE);
		t.eq(",", TokenType.fromChar(__chrat(",", 0)), TokenType.COMMA);
		t.eq(".", TokenType.fromChar(__chrat(".", 0)), TokenType.DOT);
		t.eq("-", TokenType.fromChar(__chrat("-", 0)), TokenType.MINUS);
		t.eq("+", TokenType.fromChar(__chrat("+", 0)), TokenType.PLUS);
		t.eq(";", TokenType.fromChar(__chrat(";", 0)), TokenType.SEMICOLON);
		t.eq("*", TokenType.fromChar(__chrat("*", 0)), TokenType.STAR);
		
		t.begin("Special Cases");
			t.eq("/", TokenType.fromChar(__chrat("/", 0)), nil);
			t.eq("!", TokenType.fromChar(__chrat("!", 0)), nil);
			t.eq("=", TokenType.fromChar(__chrat("=", 0)), nil);
			t.eq(">", TokenType.fromChar(__chrat(">", 0)), nil);
			t.eq("<", TokenType.fromChar(__chrat("<", 0)), nil);
		t.end("Special Cases");
		
		t.begin("Non-tokens");
			t.eq("eof", TokenType.fromChar(Char.EOF), nil);
			t.eq("nul", TokenType.fromChar(Char.NUL), nil);
			t.eq("tab", TokenType.fromChar(Char.TAB), nil);
			t.eq("lf", TokenType.fromChar(Char.LF), nil);
			t.eq("cr", TokenType.fromChar(Char.CR), nil);
			t.eq("space", TokenType.fromChar(__chrat(" ", 0)), nil);
			t.eq("#", TokenType.fromChar(__chrat("#", 0)), nil);
			t.eq("$", TokenType.fromChar(__chrat("$", 0)), nil);
			t.eq("&", TokenType.fromChar(__chrat("&", 0)), nil);
			t.eq("%", TokenType.fromChar(__chrat("%", 0)), nil);
			t.eq(":", TokenType.fromChar(__chrat(":", 0)), nil);
			t.eq("?", TokenType.fromChar(__chrat("?", 0)), nil);
			t.eq("@", TokenType.fromChar(__chrat("@", 0)), nil);
			t.eq("[", TokenType.fromChar(__chrat("[", 0)), nil);
			t.eq("\", TokenType.fromChar(__chrat("\", 0)), nil);
			t.eq("]", TokenType.fromChar(__chrat("]", 0)), nil);
			t.eq("^", TokenType.fromChar(__chrat("^", 0)), nil);
			t.eq("|", TokenType.fromChar(__chrat("|", 0)), nil);
			t.eq("~", TokenType.fromChar(__chrat("~", 0)), nil);
		t.end("Non-tokens");
	t.end("Characters");
	
	t.begin("Keywords");
		t.eq("and", TokenType.fromKeyword("and"), TokenType.AND);
		t.eq("class", TokenType.fromKeyword("class"), TokenType.CLASS);
		t.eq("else", TokenType.fromKeyword("else"), TokenType.ELSE);
		t.eq("false", TokenType.fromKeyword("false"), TokenType.FALSE);
		t.eq("for", TokenType.fromKeyword("for"), TokenType.FOR);
		t.eq("fun", TokenType.fromKeyword("fun"), TokenType.FUN);
		t.eq("if", TokenType.fromKeyword("if"), TokenType.IF);
		t.eq("nil", TokenType.fromKeyword("nil"), TokenType.NIL);
		t.eq("or", TokenType.fromKeyword("or"), TokenType.OR);
		t.eq("print", TokenType.fromKeyword("print"), TokenType.PRINT);
		t.eq("return", TokenType.fromKeyword("return"), TokenType.RETURN);
		t.eq("super", TokenType.fromKeyword("super"), TokenType.SUPER);
		t.eq("this", TokenType.fromKeyword("this"), TokenType.THIS);
		t.eq("true", TokenType.fromKeyword("true"), TokenType.TRUE);
		t.eq("var", TokenType.fromKeyword("var"), TokenType.VAR);
		t.eq("while", TokenType.fromKeyword("while"), TokenType.WHILE);
		
		t.begin("Identifiers");
			t.eq("a1", TokenType.fromKeyword("a1"), nil);
			t.eq("an", TokenType.fromKeyword("an"), nil);
			t.eq("case", TokenType.fromKeyword("case"), nil);
			t.eq("class2", TokenType.fromKeyword("class2"), nil);
			t.eq("classy", TokenType.fromKeyword("classy"), nil);
			t.eq("default", TokenType.fromKeyword("default"), nil);
			t.eq("_else", TokenType.fromKeyword("_else"), nil);
			t.eq("if_", TokenType.fromKeyword("if_"), nil);
			t.eq("import", TokenType.fromKeyword("import"), nil);
			t.eq("klass", TokenType.fromKeyword("klass"), nil);
			t.eq("match", TokenType.fromKeyword("match"), nil);
			t.eq("switch", TokenType.fromKeyword("switch"), nil);
			t.eq("True", TokenType.fromKeyword("True"), nil);
			t.eq("VAR", TokenType.fromKeyword("VAR"), nil);
			t.eq("x", TokenType.fromKeyword("x"), nil);
		t.end("Identifiers");
		
		t.begin("Invalid");
			t.eq("empty", TokenType.fromKeyword(""), nil);
			t.eq("space", TokenType.fromKeyword(" "), nil);
			t.eq("spaced", TokenType.fromKeyword("if "), nil);
			t.eq("commented", TokenType.fromKeyword("//while"), nil);
			t.eq("token", TokenType.fromKeyword("+"), nil);
		t.end("Invalid");
	t.end("Keywords");
}
