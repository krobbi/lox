// #import <list>
// #import <map>

// #import "/ast/walker.lox"
// #import "class_type.lox"
// #import "function_type.lox"
// #import "symbol.lox"

// Walks AST nodes and resolves them.
class ResolverWalker < Walker {
	// Initialize the resolver walker from configuration.
	init(config) {
		super.init();
		
		// The resolver walker's log.
		this._log = config.getLog();
		
		// The resolver walker's class type stack.
		this._classTypes = List();
		
		// The resolver walker's function type stack.
		this._functionTypes = List();
		
		// The resolver walker's scope stack.
		this._scopes = List();
		
		// Whether the resolver walker's current branch has returned.
		this._branchReturned = false;
		
		// The resolver walker's optional current initializer name.
		this._initializerName = nil;
	}
	
	// Resolve a program node.
	visitProgram(node) {
		// Define a native function in the program from its name.
		fun defineNative(name) {
			this._declare(name, node);
			this._define(name);
		}
		
		this._beginScope();
		defineNative("clock");
		defineNative("__argc");
		defineNative("__argv");
		defineNative("__chrat");
		defineNative("__exit");
		defineNative("__fclose");
		defineNative("__fgetc");
		defineNative("__fopenr");
		defineNative("__fopenw");
		defineNative("__fputc");
		defineNative("__ftoa");
		defineNative("__stderr");
		defineNative("__stdin");
		defineNative("__stdout");
		defineNative("__strlen");
		defineNative("__strof");
		defineNative("__trunc");
		super.visitProgram(node);
		this._endScope();
	}
	
	// Resolve a module node.
	visitModule(node) {
		this._resolveStatements(node.getStatements());
	}
	
	// Resolve a block statement node.
	visitBlockStmt(node) {
		this._beginScope();
		var enclosingBranchReturned = this._branchReturned;
		this._branchReturned = false;
		this._resolveStatements(node.getStatements());
		this._branchReturned = enclosingBranchReturned or this._branchReturned;
		this._endScope();
	}
	
	// Resolve a class statement node.
	visitClassStmt(node) {
		var name = node.getName();
		this._declare(name, node);
		this._define(name);
		var superclass = node.getSuperclass();
		
		if (superclass) {
			if (superclass.getName() == name) {
				this._logError("Class '" + name + "' can't inherit from itself.", superclass);
			}
			
			this.visit(superclass);
			this._beginClass(ClassType.SUBCLASS);
		} else {
			this._beginClass(ClassType.CLASS);
		}
		
		for (var iter = node.getMethods().iter(); iter.hasNext();) {
			var method = iter.getNext();
			
			if (method.getName() == "init") {
				this._beginFunction(FunctionType.INITIALIZER);
			} else {
				this._beginFunction(FunctionType.METHOD);
			}
			
			this._resolveFunction(method);
			this._endFunction();
		}
		
		this._endClass();
	}
	
	// Resolve a for statement node.
	visitForStmt(node) {
		this._beginScope();
		var initializer = node.getInitializer();
		
		if (initializer) {
			this.visit(initializer);
		}
		
		var condition = node.getCondition();
		
		if (condition) {
			this.visit(condition);
		}
		
		var undefinedSymbols = this._getUndefinedSymbols();
		this._branchReturned = false;
		this.visit(node.getBody());
		var increment = node.getIncrement();
		
		if (increment) {
			this.visit(increment);
		}
		
		this._branchReturned = !condition;
		this._undefineSymbols(undefinedSymbols);
		this._endScope();
	}
	
	// Resolve a function statement node.
	visitFunctionStmt(node) {
		var name = node.getName();
		this._declare(name, node);
		this._define(name);
		this._beginFunction(FunctionType.FUNCTION);
		this._resolveFunction(node);
		this._endFunction();
	}
	
	// Resolve an if statement node.
	visitIfStmt(node) {
		// Return a list of definitions from a branch.
		fun defineBranch(branch) {
			var undefinedSymbols = this._getUndefinedSymbols();
			this._branchReturned = false;
			this.visit(branch);
			var definitions = List();
			
			for (var iter = undefinedSymbols.iter(); iter.hasNext();) {
				var symbol = iter.getNext();
				
				if (symbol.isDefined) {
					symbol.isDefined = false;
					definitions.pushBack(symbol);
				}
			}
			
			return definitions;
		}
		
		// Define a list of symbols.
		fun defineSymbols(symbols) {
			for (var iter = symbols.iter(); iter.hasNext();) {
				iter.getNext().isDefined = true;
			}
		}
		
		this.visit(node.getCondition());
		var thenDefinitions = defineBranch(node.getThenBranch());
		var thenReturned = this._branchReturned;
		this._branchReturned = false;
		var elseBranch = node.getElseBranch();
		
		if (elseBranch) {
			var elseDefinitions = defineBranch(elseBranch);
			var elseReturned = this._branchReturned;
			this._branchReturned = false;
			
			if (thenReturned and elseReturned) {
				this._branchReturned = true;
			} else if (thenReturned) {
				defineSymbols(elseDefinitions);
			} else if (elseReturned) {
				defineSymbols(thenDefinitions);
			} else {
				for (var iter = thenDefinitions.iter(); iter.hasNext();) {
					var symbol = iter.getNext();
					
					if (elseDefinitions.has(symbol)) {
						symbol.isDefined = true;
					}
				}
			}
		}
	}
	
	// Resolve a return statement node.
	visitReturnStmt(node) {
		var functionType = this._getFunctionType();
		
		if (functionType == FunctionType.NONE) {
			this._logError("Can't return from top-level code.", node);
		} else {
			this._branchReturned = true;
		}
		
		var value = node.getValue();
		
		if (value) {
			if (functionType == FunctionType.INITIALIZER) {
				this._logError("Can't return a value from an initializer.", value);
			}
			
			this.visit(value);
		}
	}
	
	// Resolve a var statement node.
	visitVarStmt(node) {
		var name = node.getName();
		this._declare(name, node);
		var initializer = node.getInitializer();
		
		if (initializer) {
			this._initializerName = name;
			this.visit(initializer);
			this._initializerName = nil;
			this._define(name);
		}
	}
	
	// Resolve a while statement node.
	visitWhileStmt(node) {
		this.visit(node.getCondition());
		var undefinedSymbols = this._getUndefinedSymbols();
		this._branchReturned = false;
		this.visit(node.getBody());
		this._branchReturned = false;
		this._undefineSymbols(undefinedSymbols);
	}
	
	// Resolve an assign expression node.
	visitAssignExpr(node) {
		super.visitAssignExpr(node);
		var name = node.getName();
		var symbol = this._getSymbol(name);
		
		if (!symbol) {
			this._logError("Can't assign undeclared variable '" + name + "'.", node);
		} else if (name == this._initializerName) {
			this._logError("Can't assign variable '" + name + "' in its own initializer.", node);
		} else {
			this._define(name);
		}
	}
	
	// Resolve a logical expression node.
	visitLogicalExpr(node) {
		this.visit(node.getLeft());
		var undefinedSymbols = this._getUndefinedSymbols();
		this.visit(node.getRight());
		this._undefineSymbols(undefinedSymbols);
	}
	
	// Resolve a super expression node.
	visitSuperExpr(node) {
		var classType = this._getClassType();
		
		if (classType == ClassType.NONE) {
			this._logError("Can't use 'super' outside of a class.", node);
		} else if (classType != ClassType.SUBCLASS) {
			this._logError("Can't use 'super' in a class with no superclass.", node);
		}
	}
	
	// Resolve a this expression node.
	visitThisExpr(node) {
		if (this._getClassType() == ClassType.NONE) {
			this._logError("Can't use 'this' outside of a class.", node);
		}
	}
	
	// Resolve a variable expression node.
	visitVariableExpr(node) {
		var name = node.getName();
		var symbol = this._getSymbol(name);
		
		if (name == this._initializerName) {
			this._logError("Can't read variable '" + name + "' in its own initializer.", node);
		} else if (!symbol) {
			this._logError("Variable '" + name + "' is undeclared in the current scope.", node);
		} else if (!symbol.isDefined) {
			this._logError("Can't read undefined variable '" + name + "'.", node);
		}
	}
	
	// Get the current class type.
	_getClassType() {
		if (this._classTypes.isEmpty()) {
			return ClassType.NONE;
		} else {
			return this._classTypes.peekBack();
		}
	}
	
	// Get the current scope's function type.
	_getFunctionType() {
		if (this._functionTypes.isEmpty()) {
			return FunctionType.NONE;
		} else {
			return this._functionTypes.peekBack();
		}
	}
	
	// Get an optional symbol from the scope stack from its name.
	_getSymbol(name) {
		for (var i = this._scopes.getLength() - 1; i >= 0; i = i - 1) {
			var symbol = this._scopes.get(i).get(name);
			
			if (symbol) {
				return symbol;
			}
		}
		
		return nil;
	}
	
	// Get a list of all declared but undefined symbols in the scope stack.
	_getUndefinedSymbols() {
		var symbols = List();
		
		for (var iter = this._scopes.iter(); iter.hasNext();) {
			var scope = iter.getNext();
			
			for (var iter = scope.iter(); iter.hasNext();) {
				var symbol = scope.get(iter.getNext());
				
				if (!symbol.isDefined) {
					symbols.pushBack(symbol);
				}
			}
		}
		
		return symbols;
	}
	
	// Resolve a list of statement nodes.
	_resolveStatements(statements) {
		for (var iter = statements.iter(); iter.hasNext();) {
			var node = iter.getNext();
			
			if (this._branchReturned) {
				this._logError("Statement is unreachable.", node);
			}
			
			this.visit(node);
		}
	}
	
	// Resolve a function statement node in the current scope.
	_resolveFunction(node) {
		for (var iter = node.getParams().iter(); iter.hasNext();) {
			var name = iter.getNext();
			this._declare(name, node);
			this._define(name);
		}
		
		this._branchReturned = false;
		this._resolveStatements(node.getBody());
		this._branchReturned = false;
	}
	
	// Begin a new scope.
	_beginScope() {
		this._scopes.pushBack(Map());
	}
	
	// End the current scope.
	_endScope() {
		this._scopes.popBack();
	}
	
	// Begin a new class from its class type.
	_beginClass(type) {
		this._beginScope();
		this._classTypes.pushBack(type);
	}
	
	// End the current class.
	_endClass() {
		this._classTypes.popBack();
		this._endScope();
	}
	
	// Begin a new function from its function type.
	_beginFunction(type) {
		this._beginScope();
		this._functionTypes.pushBack(type);
	}
	
	// End the current function.
	_endFunction() {
		this._functionTypes.popBack();
		this._endScope();
	}
	
	// Declare a name in the current scope at a node.
	_declare(name, node) {
		var scope = this._scopes.peekBack();
		
		if (scope.has(name)) {
			this._logError(
					"Variable '" + name + "' is already declared in the current scope.", node);
		}
		
		scope.set(name, Symbol());
	}
	
	// Define a name in the scope stack.
	_define(name) {
		this._getSymbol(name).isDefined = true;
	}
	
	// Undefine a list of symbols.
	_undefineSymbols(symbols) {
		for (var iter = symbols.iter(); iter.hasNext();) {
			iter.getNext().isDefined = false;
		}
	}
	
	// Log an error message at a node's span.
	_logError(message, node) {
		this._log.logErrorAt(message, node.getSpan());
	}
}
