// Lynx
// Lox preprocessor.

// #import <call_main>
// #import "config/config.lox"
// #import "parser/parser.lox"
// #import "token/token_type.lox"

//// Uncomment to run tests:
//// #import "tests/run.lox"

// Get a node's children.
fun getNodeChildren(node) {
	return GetChildrenVisitor().visit(node);
}

// Represent a node as a string.
fun nodeToString(node) {
	var string = ToStringVisitor().visit(node);
	var span = node.getSpan();
	
	if (span) {
		string = string + " " + span.toString();
	}
	
	return "(" + string + ")";
}

// Dump a node's information.
fun dumpNode(node, flags) {
	var prefix = "";
	
	for (var iter = flags.iter(); iter.hasNext();) {
		var hasMoreVertical = iter.getNext();
		var hasMoreHorizontal = iter.hasNext();
		
		if (hasMoreVertical) {
			if (hasMoreHorizontal) {
				prefix = prefix + "| ";
			} else {
				prefix = prefix + "|-";
			}
		} else {
			if (hasMoreHorizontal) {
				prefix = prefix + "  ";
			} else {
				prefix = prefix + "|_";
			}
		}
	}
	
	print prefix + nodeToString(node);
	var children = getNodeChildren(node);
	
	for (var iter = children.iter(); iter.hasNext();) {
		var child = iter.getNext();
		flags.pushBack(iter.hasNext());
		dumpNode(child, flags);
		flags.popBack();
	}
}

// Dump an AST's information.
fun dumpTree(node) {
	dumpNode(node, List());
}

// Parse the module at a configuration's main path.
fun parseMainModule(config) {
	var log = config.getLog();
	var mainPath = config.getMainPath();
	var stream = __fopenr(mainPath);
	
	if (!stream) {
		log.logError("Could not open '" + mainPath + "' for reading. File may not exist.");
		return;
	}
	
	var parser = Parser(config, mainPath, stream);
	var module = parser.parseModule();
	dumpTree(module);
	
	if (__fclose(stream)) {
		log.logError("Parser did not close '" + mainPath + "' after parsing.");
	}
}

// Run Lynx from arguments and return an exit status code.
fun main(args) {
	var config = Config(args);
	var log = config.getLog();
	
	if (log.hasErrors()) {
		log.flush();
		return 1;
	}
	
	parseMainModule(config);
	
	if (log.hasErrors()) {
		log.flush();
		return 1;
	}
	
	return 0;
}

callMain(main);
