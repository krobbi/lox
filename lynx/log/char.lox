// An enumeration of characters.
class Char {
	// Initialize the character enumeration.
	init() {
		// An end-of-file character.
		this.EOF = -1;
		
		// A '`\0`' character.
		this.NUL = 0;
		
		// A `'\t'` character.
		this.TAB = 9;
		
		// A `'\n'` character.
		this.LF = 10;
		
		// A `'\r'` character.
		this.CR = 13;
		
		// A `' '` character.
		this.SPACE = __chrat(" ", 0);
		
		// A `'!'` character.
		this.BANG = __chrat("!", 0);
		
		// A `'"'` character.
		this.QUOTE = 34;
		
		// A `'#'` character.
		this.HASH = __chrat("#", 0);
		
		// A `'\''` character.
		this.APOSTROPHE = __chrat("'", 0);
		
		// A `'*'` character.
		this.STAR = __chrat("*", 0);
		
		// A `'.'` character.
		this.DOT = __chrat(".", 0);
		
		// A `'/'` character.
		this.SLASH = __chrat("/", 0);
		
		// A `'0'` character.
		this.DIGIT_0 = __chrat("0", 0);
		
		// A `'9'` character.
		this.DIGIT_9 = __chrat("9", 0);
		
		// A `':'` character.
		this.COLON = __chrat(":", 0);
		
		// A `'<'` character.
		this.LESS = __chrat("<", 0);
		
		// An `'='` character.
		this.EQUAL = __chrat("=", 0);
		
		// A `'>'` character.
		this.GREATER = __chrat(">", 0);
		
		// A `'?'` character.
		this.QUESTION = __chrat("?", 0);
		
		// An `'A'` character.
		this.A_UPPER = __chrat("A", 0);
		
		// A `'Z'` character.
		this.Z_UPPER = __chrat("Z", 0);
		
		// A `'\\'` character.
		this.BACKSLASH = __chrat("\", 0);
		
		// A `^'` character.
		this.CARET = __chrat("^", 0);
		
		// An `'_'` character.
		this.UNDERSCORE = __chrat("_", 0);
		
		// An `'a'` character.
		this.A_LOWER = __chrat("a", 0);
		
		// A `'z'` character.
		this.Z_LOWER = __chrat("z", 0);
		
		// A `'|'` character.
		this.PIPE = __chrat("|", 0);
		
		// A `'~'` character.
		this.TILDE = __chrat("~", 0);
	}
	
	// Get whether a character is a letter or underscore.
	isAlpha(char) {
		return (
				char >= this.A_LOWER and char <= this.Z_LOWER
				or char >= this.A_UPPER and char <= this.Z_UPPER
				or char == this.UNDERSCORE);
	}
	
	// Get whether a character is a digit.
	isDigit(char) {
		return char >= this.DIGIT_0 and char <= this.DIGIT_9;
	}
	
	// Get whether a character is whitespace.
	isWhitespace(char) {
		return char == this.SPACE or char == this.TAB or char == this.LF or char == this.CR;
	}
	
	// Escape a character to a string.
	escape(char) {
		if (char == this.EOF) {
			return "\{EOF}";
		} else if (char == this.NUL) {
			return "\0";
		} else if (char == this.TAB) {
			return "\t";
		} else if (char == this.LF) {
			return "\n";
		} else if (char == this.CR) {
			return "\r";
		} else if (char == this.QUOTE or char == this.APOSTROPHE or char == this.BACKSLASH) {
			return "\" + __strof(char);
		} else if (char >= this.SPACE and char <= this.TILDE) {
			return __strof(char);
		} else {
			// Convert a digit to a character.
			fun digitToChar(digit) {
				if (digit < 10) {
					return digit + this.DIGIT_0;
				} else {
					return digit - 10 + this.A_LOWER;
				}
			}
			
			var high = 0;
			
			while (char >= 16) {
				char = char - 16;
				high = high + 1;
			}
			
			return "\x" + __strof(digitToChar(high)) + __strof(digitToChar(char));
		}
	}
}

Char = Char();
