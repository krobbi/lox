// Visits AST nodes and returns their string representations.
class ToStringVisitor < Visitor {
	// Initialize the to string visitor.
	init() {
		super.init();
	}
	
	// Get an expression statement node's string representation.
	visitExprStmt(node) {
		return "ExprStmt";
	}
	
	// Get a grouping expression node's string representation.
	visitGroupingExpr(node) {
		return "GroupingExpr";
	}
	
	// Get a literal expression node's string representation.
	visitLiteralExpr(node) {
		return "LiteralExpr '" + node.getLiteral().toString() + "'";
	}
	
	// Get a module node's string representation.
	visitModule(node) {
		return "Module";
	}
	
	// Get a super expression node's string representation.
	visitSuperExpr(node) {
		return "SuperExpr '" + node.getMethod() + "'";
	}
	
	// Get a this expression node's string representation.
	visitThisExpr(node) {
		return "ThisExpr";
	}
	
	// Get a variable expression node's string representation.
	visitVariableExpr(node) {
		return "VariableExpr '" + node.getName() + "'";
	}
}
