// Visits AST nodes and returns their string representations.
class ToStringVisitor < Visitor {
	// Initialize the to string visitor.
	init() {
		super.init();
	}
	
	// Get an import node's string representation.
	visitImport(node) {
		return "Import '" + Literal(LiteralType.STRING, node.getPath()).toString() + "'";
	}
	
	// Get a module node's string representation.
	visitModule(node) {
		return "Module";
	}
	
	// Get a block statement node's string representation.
	visitBlockStmt(node) {
		return "BlockStmt";
	}
	
	// Get a class statement node's string representation.
	visitClassStmt(node) {
		return "ClassStmt '" + node.getName() + "'";
	}
	
	// Get an expression statement node's string representation.
	visitExprStmt(node) {
		return "ExprStmt";
	}
	
	// Get a function statement node's string representation.
	visitFunctionStmt(node) {
		var params = "";
		
		for (var iter = node.getParams().iter(); iter.hasNext();) {
			params = params + iter.getNext();
			
			if (iter.hasNext()) {
				params = params + ", ";
			}
		}
		
		return "FunctionStmt '" + node.getName() + "(" + params + ")'";
	}
	
	// Get an if statement node's string representation.
	visitIfStmt(node) {
		return "IfStmt";
	}
	
	// Get a print statement node's string representation.
	visitPrintStmt(node) {
		return "PrintStmt";
	}
	
	// Get a return statement node's string representation.
	visitReturnStmt(node) {
		return "ReturnStmt";
	}
	
	// Get a var statement node's string representation.
	visitVarStmt(node) {
		return "VarStmt '" + node.getName() + "'";
	}
	
	// Get a while statement node's string representation.
	visitWhileStmt(node) {
		return "WhileStmt";
	}
	
	// Get an assign expression node's string representation.
	visitAssignExpr(node) {
		return "AssignExpr '" + node.getName() + "'";
	}
	
	// Get a binary expression node's string representation.
	visitBinaryExpr(node) {
		return "BinaryExpr " + TokenType.toString(node.getOperator());
	}
	
	// Get a call expression node's string representation.
	visitCallExpr(node) {
		return "CallExpr";
	}
	
	// Get a get expression node's string representation.
	visitGetExpr(node) {
		return "GetExpr '" + node.getName() + "'";
	}
	
	// Get a grouping expression node's string representation.
	visitGroupingExpr(node) {
		return "GroupingExpr";
	}
	
	// Get a literal expression node's string representation.
	visitLiteralExpr(node) {
		return "LiteralExpr '" + node.getLiteral().toString() + "'";
	}
	
	// Get a logical expression node's string representation.
	visitLogicalExpr(node) {
		return "LogicalExpr " + TokenType.toString(node.getOperator());
	}
	
	// Get a set expression node's string representation.
	visitSetExpr(node) {
		return "SetExpr '" + node.getName() + "'";
	}
	
	// Get a super expression node's string representation.
	visitSuperExpr(node) {
		return "SuperExpr '" + node.getMethod() + "'";
	}
	
	// Get a this expression node's string representation.
	visitThisExpr(node) {
		return "ThisExpr";
	}
	
	// Get a unary expression node's string representation.
	visitUnaryExpr(node) {
		return "UnaryExpr " + TokenType.toString(node.getOperator());
	}
	
	// Get a variable expression node's string representation.
	visitVariableExpr(node) {
		return "VariableExpr '" + node.getName() + "'";
	}
}
