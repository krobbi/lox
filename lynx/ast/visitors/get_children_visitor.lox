// Visits AST nodes and returns their children as lists.
class GetChildrenVisitor < Visitor {
	// Initialize the get children visitor.
	init() {
		super.init();
	}
	
	// Get a node's children.
	visitDefault(node) {
		return List();
	}
	
	// Get an assign expression node's children.
	visitAssignExpr(node) {
		return List().pushBack(node.getValue());
	}
	
	// Get a binary expression node's children.
	visitBinaryExpr(node) {
		return List().pushBack(node.getLeft()).pushBack(node.getRight());
	}
	
	// Get a call expression node's children.
	visitCallExpr(node) {
		var children = List().pushBack(node.getCallee());
		
		for (var iter = node.getArguments().iter(); iter.hasNext();) {
			children.pushBack(iter.getNext());
		}
		
		return children;
	}
	
	// Get a get expression node's children.
	visitGetExpr(node) {
		return List().pushBack(node.getObject());
	}
	
	// Get a grouping expression node's children.
	visitGroupingExpr(node) {
		return List().pushBack(node.getExpression());
	}
	
	// Get an expression statement node's children.
	visitExprStmt(node) {
		return List().pushBack(node.getExpression());
	}
	
	// Get a logical expression node's children.
	visitLogicalExpr(node) {
		return List().pushBack(node.getLeft()).pushBack(node.getRight());
	}
	
	// Get a module node's children.
	visitModule(node) {
		return node.getStatements();
	}
	
	// Get a set expression node's children.
	visitSetExpr(node) {
		return List().pushBack(node.getObject()).pushBack(node.getValue());
	}
	
	// Get a unary expression node's children.
	visitUnaryExpr(node) {
		return List().pushBack(node.getRight());
	}
}
