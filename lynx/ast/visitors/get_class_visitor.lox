// Visits AST nodes and returns their classes.
class GetClassVisitor < Visitor {
	// Initialize the get class visitor.
	init() {
		super.init();
	}
	
	// Get an assign expression node's class.
	visitAssignExpr(node) {
		return AssignExprNode;
	}
	
	// Get a binary expression node's class.
	visitBinaryExpr(node) {
		return BinaryExprNode;
	}
	
	// Get a block statement node's class.
	visitBlockStmt(node) {
		return BlockStmtNode;
	}
	
	// Get a call expression node's class.
	visitCallExpr(node) {
		return CallExprNode;
	}
	
	// Get an expression statement node's class.
	visitExprStmt(node) {
		return ExprStmtNode;
	}
	
	// Get a get expression node's class.
	visitGetExpr(node) {
		return GetExprNode;
	}
	
	// Get a grouping expression node's class.
	visitGroupingExpr(node) {
		return GroupingExprNode;
	}
	
	// Get a literal expression node's class.
	visitLiteralExpr(node) {
		return LiteralExprNode;
	}
	
	// Get a logical expression node's class.
	visitLogicalExpr(node) {
		return LogicalExprNode;
	}
	
	// Get a module node's class.
	visitModule(node) {
		return ModuleNode;
	}
	
	// Get a set expression node's class.
	visitSetExpr(node) {
		return SetExprNode;
	}
	
	// Get a super expression node's class.
	visitSuperExpr(node) {
		return SuperExprNode;
	}
	
	// Get a this expression node's class.
	visitThisExpr(node) {
		return ThisExprNode;
	}
	
	// Get a unary expression node's class.
	visitUnaryExpr(node) {
		return UnaryExprNode;
	}
	
	// Get a variable expression node's class.
	visitVariableExpr(node) {
		return VariableExprNode;
	}
}
