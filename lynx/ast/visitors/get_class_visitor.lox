// Visits AST nodes and returns their classes.
class GetClassVisitor < Visitor {
	// Initialize the get class visitor.
	init() {
		super.init();
	}
	
	// Visit an assign expression node.
	visitAssignExpr(node) {
		return AssignExprNode;
	}
	
	// Visit a binary expression node.
	visitBinaryExpr(node) {
		return BinaryExprNode;
	}
	
	// Visit a call expression node.
	visitCallExpr(node) {
		return CallExprNode;
	}
	
	// Visit an expression statement node.
	visitExprStmt(node) {
		return ExprStmtNode;
	}
	
	// Visit a get expression node.
	visitGetExpr(node) {
		return GetExprNode;
	}
	
	// Visit a grouping expression node.
	visitGroupingExpr(node) {
		return GroupingExprNode;
	}
	
	// Visit a literal expression node.
	visitLiteralExpr(node) {
		return LiteralExprNode;
	}
	
	// Visit a logical expression node.
	visitLogicalExpr(node) {
		return LogicalExprNode;
	}
	
	// Visit a module node.
	visitModule(node) {
		return ModuleNode;
	}
	
	// Visit a super expression node.
	visitSuperExpr(node) {
		return SuperExprNode;
	}
	
	// Visit a this expression node.
	visitThisExpr(node) {
		return ThisExprNode;
	}
	
	// Visit a unary expression node.
	visitUnaryExpr(node) {
		return UnaryExprNode;
	}
	
	// Visit a variable expression node.
	visitVariableExpr(node) {
		return VariableExprNode;
	}
}
