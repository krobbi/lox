// Parses a module AST from an input stream.
class Parser {
	// Initialize the parser from its configuration, file name, and input
	// stream.
	init(config, name, stream) {
		// The parser's or operators.
		this._OR_OPS = List().pushBack(TokenType.OR);
		
		// The parser's and operators.
		this._AND_OPS = List().pushBack(TokenType.AND);
		
		// The parser's equality operators.
		this._EQUALITY_OPS = List().pushBack(TokenType.BANG_EQUAL).pushBack(TokenType.EQUAL_EQUAL);
		
		// The parser's comparison operators.
		this._COMPARISON_OPS = List()
			.pushBack(TokenType.GREATER)
			.pushBack(TokenType.GREATER_EQUAL)
			.pushBack(TokenType.LESS)
			.pushBack(TokenType.LESS_EQUAL);
		
		// The parser's term operators.
		this._TERM_OPS = List().pushBack(TokenType.MINUS).pushBack(TokenType.PLUS);
		
		// The parser's factor operators.
		this._FACTOR_OPS = List().pushBack(TokenType.SLASH).pushBack(TokenType.STAR);
		
		// The parser's log.
		this._log = config.getLog();
		
		// The parser's scanner.
		this._scanner = Scanner(config, name, stream);
		
		// The parser's parsed import nodes.
		this._imports = List();
		
		// The parser's current span.
		this._span = Span(name);
		
		// The parser's stack of node spans.
		this._spanStack = List();
		
		// The parser's next token.
		this._next = this._scanner.scanToken();
		
		// Whether the parser is throwing an error.
		this._isThrowing = false;
	}
	
	// Parse a module.
	parseModule() {
		this._pushSpanNext();
		var statements = List();
		
		while (!this._is(TokenType.EOF)) {
			var statement = this._parseDeclaration();
			
			if (statement) {
				statements.pushBack(statement);
			}
		}
		
		return ModuleNode(this._popSpan(), this._imports, statements);
	}
	
	// Parse an import.
	_parseImport() {
		this._pushSpan();
		var path;
		
		if (this._is(TokenType.STRING)) {
			path = this._advance().getValue();
		} else if (this._accept(TokenType.LESS)) {
			path = "<";
			
			for (var isLooping = true; isLooping;) {
				var part = this._expect(TokenType.IDENTIFIER, "for standard path part");
				
				if (!part) {
					return this._dropSpan();
				}
				
				path = path + part.getValue();
				
				if (this._accept(TokenType.SLASH)) {
					path = path + "/";
				} else {
					isLooping = false;
				}
			}
			
			if (!this._expect(TokenType.GREATER, "after standard path")) {
				return this._dropSpan();
			}
			
			path = path + ">";
		} else {
			this._expected("an import path");
			return this._dropSpan();
		}
		
		return ImportNode(this._popSpan(), path);
	}
	
	// Parse an optional declaration.
	_parseDeclaration() {
		var decl = nil;
		
		if (this._accept(TokenType.HASH_IMPORT)) {
			var import = this._parseImport();
			
			if (import) {
				this._imports.pushBack(import);
			}
		} else if (this._accept(TokenType.CLASS)) {
			decl = this._parseClassDecl();
		} else if (this._accept(TokenType.FUN)) {
			decl = this._parseFunctionDecl(false);
		} else if (this._accept(TokenType.VAR)) {
			decl = this._parseVarDecl();
		} else {
			decl = this._parseStatement();
		}
		
		if (this._catchError()) {
			return nil;
		}
		
		return decl;
	}
	
	// Parse a class declaration.
	_parseClassDecl() {
		this._pushSpan();
		var name = this._expect(TokenType.IDENTIFIER, "for class name");
		
		if (!name) {
			return this._dropSpan();
		}
		
		var superclass = nil;
		
		if (this._accept(TokenType.LESS)) {
			superclass = this._expect(TokenType.IDENTIFIER, "for superclass name");
			
			if (!superclass) {
				return this._dropSpan();
			}
			
			superclass = VariableExprNode(superclass.getSpan().clone(), superclass.getValue());
		}
		
		if (!this._expect(TokenType.LEFT_BRACE, "before class body")) {
			return this._dropSpan();
		}
		
		var methods = List();
		
		while (!this._is(TokenType.RIGHT_BRACE) and !this._is(TokenType.EOF)) {
			var method = this._parseFunctionDecl(true);
			
			if (!method) {
				return this._dropSpan();
			}
			
			methods.pushBack(method);
		}
		
		if (!this._expect(TokenType.RIGHT_BRACE, "after class body")) {
			return this._dropSpan();
		}
		
		return ClassStmtNode(this._popSpan(), name.getValue(), superclass, methods);
	}
	
	// Parse a function declaration.
	_parseFunctionDecl(isMethod) {
		var kind;
		
		if (isMethod) {
			kind = "method";
			this._pushSpanNext();
		} else {
			kind = "function";
			this._pushSpan();
		}
		
		var name = this._expect(TokenType.IDENTIFIER, "for " + kind + " name");
		
		if (!name) {
			return this._dropSpan();
		}
		
		if (!this._expect(TokenType.LEFT_PAREN, "after " + kind + " name")) {
			return this._dropSpan();
		}
		
		var params = List();
		
		if (!this._is(TokenType.RIGHT_PAREN)) {
			for (var isLooping = true; isLooping;) {
				if (params.getLength() >= 255) {
					this._throwError("Can't have more than 255 parameters.");
					return this._dropSpan();
				}
				
				var param = this._expect(TokenType.IDENTIFIER, "for parameter name");
				
				if (!param) {
					return this._dropSpan();
				}
				
				params.pushBack(param.getValue());
				
				if (!this._accept(TokenType.COMMA)) {
					isLooping = false;
				}
			}
		}
		
		if (!this._expect(TokenType.RIGHT_PAREN, "after parameters")) {
			return this._dropSpan();
		}
		
		if (!this._expect(TokenType.LEFT_BRACE, "before " + kind + " body")) {
			return this._dropSpan();
		}
		
		var body = this._parseBlockStmt();
		
		if (!body) {
			return this._dropSpan();
		}
		
		return FunctionStmtNode(this._popSpan(), name.getValue(), params, body.getStatements());
	}
	
	// Parse a var declaration.
	_parseVarDecl() {
		this._pushSpan();
		var name = this._expect(TokenType.IDENTIFIER, "for variable name");
		
		if (!name) {
			return this._dropSpan();
		}
		
		var initializer = nil;
		
		if (this._accept(TokenType.EQUAL)) {
			initializer = this._parseExpression();
			
			if (!initializer) {
				return this._dropSpan();
			}
		}
		
		if (!this._expect(TokenType.SEMICOLON, "after variable declaration")) {
			return this._dropSpan();
		}
		
		return VarStmtNode(this._popSpan(), name.getValue(), initializer);
	}
	
	// Parse a statement.
	_parseStatement() {
		if (this._accept(TokenType.FOR)) {
			return this._parseForStmt();
		} else if (this._accept(TokenType.IF)) {
			return this._parseIfStmt();
		} else if (this._accept(TokenType.PRINT)) {
			return this._parsePrintStmt();
		} else if (this._accept(TokenType.RETURN)) {
			return this._parseReturnStmt();
		} else if (this._accept(TokenType.WHILE)) {
			return this._parseWhileStmt();
		} else if (this._accept(TokenType.LEFT_BRACE)) {
			return this._parseBlockStmt();
		} else {
			return this._parseExprStmt();	
		}
	}
	
	// Parse a for statement.
	_parseForStmt() {
		this._pushSpan();
		
		if (!this._expect(TokenType.LEFT_PAREN, "after 'for'")) {
			return this._dropSpan();
		}
		
		var initializer = nil;
		
		if (this._accept(TokenType.VAR)) {
			initializer = this._parseVarDecl();
			
			if (!initializer) {
				return this._dropSpan();
			}
		} else if (!this._accept(TokenType.SEMICOLON)) {
			initializer = this._parseExprStmt();
			
			if (!initializer) {
				return this._dropSpan();
			}
		}
		
		// TODO: Conditions should be optional if for statement nodes are added.
		var condition;
		
		if (this._accept(TokenType.SEMICOLON)) {
			this._pushSpan();
			condition = LiteralExprNode(this._popSpan(), Literal(LiteralType.BOOL, true));
		} else {
			condition = this._parseExpression();
			
			if (!condition) {
				return this._dropSpan();
			}
			
			if (!this._expect(TokenType.SEMICOLON, "after loop condition")) {
				return this._dropSpan();
			}
		}
		
		var increment = nil;
		
		if (!this._accept(TokenType.RIGHT_PAREN)) {
			increment = this._parseExpression();
			
			if (!increment) {
				return this._dropSpan();
			}
			
			if (!this._expect(TokenType.RIGHT_PAREN, "after for clauses")) {
				return this._dropSpan();
			}
		}
		
		var body = this._parseStatement();
		
		if (!body) {
			return this._dropSpan();
		}
		
		// TODO: Consider adding for statement nodes instead of desugaring.
		if (increment) {
			var bodySpan = body.getSpan().clone();
			var incrementSpan = increment.getSpan().clone();
			bodySpan.include(incrementSpan);
			body = BlockStmtNode(bodySpan, List()
				.pushBack(body)
				.pushBack(ExprStmtNode(incrementSpan, increment)));
		}
		
		body = WhileStmtNode(this._popSpan(), condition, body);
		
		if (initializer) {
			body = BlockStmtNode(body.getSpan().clone(), List()
				.pushBack(initializer)
				.pushBack(body));
		}
		
		return body;
	}
	
	// Parse an if statement.
	_parseIfStmt() {
		this._pushSpan();
		
		if (!this._expect(TokenType.LEFT_PAREN, "after 'if'")) {
			return this._dropSpan();
		}
		
		var condition = this._parseExpression();
		
		if (!condition) {
			return this._dropSpan();
		}
		
		if (!this._expect(TokenType.RIGHT_PAREN, "after if condition")) {
			return this._dropSpan();
		}
		
		var thenBranch = this._parseStatement();
		
		if (!thenBranch) {
			return this._dropSpan();
		}
		
		var elseBranch = nil;
		
		if (this._accept(TokenType.ELSE)) {
			elseBranch = this._parseStatement();
			
			if (!elseBranch) {
				return this._dropSpan();
			}
		}
		
		return IfStmtNode(this._popSpan(), condition, thenBranch, elseBranch);
	}
	
	// Parse a print statement.
	_parsePrintStmt() {
		this._pushSpan();
		var expression = this._parseExpression();
		
		if (!expression) {
			return this._dropSpan();
		}
		
		if (!this._expect(TokenType.SEMICOLON, "after value")) {
			return this._dropSpan();
		}
		
		return PrintStmtNode(this._popSpan(), expression);
	}
	
	// Parse a return statement.
	_parseReturnStmt() {
		this._pushSpan();
		var value = nil;
		
		if (!this._is(TokenType.SEMICOLON)) {
			value = this._parseExpression();
			
			if (!value) {
				return this._dropSpan();
			}
		}
		
		if (!this._expect(TokenType.SEMICOLON, "after return value")) {
			return this._dropSpan();
		}
		
		return ReturnStmtNode(this._popSpan(), value);
	}
	
	// Parse a while statement.
	_parseWhileStmt() {
		this._pushSpan();
		
		if (!this._expect(TokenType.LEFT_PAREN, "after 'while'")) {
			return this._dropSpan();
		}
		
		var condition = this._parseExpression();
		
		if (!condition) {
			return this._dropSpan();
		}
		
		if (!this._expect(TokenType.RIGHT_PAREN, "after condition")) {
			return this._dropSpan();
		}
		
		var body = this._parseStatement();
		
		if (!body) {
			return this._dropSpan();
		}
		
		return WhileStmtNode(this._popSpan(), condition, body);
	}
	
	// Parse a block statement.
	_parseBlockStmt() {
		this._pushSpan();
		var statements = List();
		
		while (!this._is(TokenType.RIGHT_BRACE) and !this._is(TokenType.EOF)) {
			var statement = this._parseDeclaration();
			
			if (statement) {
				statements.pushBack(statement);
			}
		}
		
		if (!this._expect(TokenType.RIGHT_BRACE, "after block")) {
			return this._dropSpan();
		}
		
		return BlockStmtNode(this._popSpan(), statements);
	}
	
	// Parse an expression statement.
	_parseExprStmt() {
		this._pushSpanNext();
		var expression = this._parseExpression();
		
		if (!expression) {
			return this._dropSpan();
		}
		
		if (!this._expect(TokenType.SEMICOLON, "after expression")) {
			return this._dropSpan();
		}
		
		return ExprStmtNode(this._popSpan(), expression);
	}
	
	// Parse an expression.
	_parseExpression() {
		return this._parseAssignmentExpr();
	}
	
	// Parse an assignment expression.
	_parseAssignmentExpr() {
		this._pushSpanNext();
		var expr = this._parseOrExpr();
		
		if (!expr) {
			return this._dropSpan();
		}
		
		if (this._accept(TokenType.EQUAL)) {
			var value = this._parseAssignmentExpr();
			
			if (!value) {
				return this._dropSpan();
			}
			
			var exprClass = GetClassVisitor().visit(expr);
			
			if (exprClass == VariableExprNode) {
				return AssignExprNode(this._popSpan(), expr.getName(), value);
			} else if (exprClass == GetExprNode) {
				return SetExprNode(this._popSpan(), expr.getObject(), expr.getName(), value);
			}
			
			this._logError("Invalid assignment target.", expr);
		}
		
		this._dropSpan();
		return expr;
	}
	
	// Parse a binary expression.
	_parseBinaryExpr(constructor, operators, parser) {
		this._pushSpanNext();
		var expr = parser();
		
		if (!expr) {
			return this._dropSpan();
		}
		
		while (operators.has(this._next.getType())) {
			var operator = this._advance().getType();
			var right = parser();
			
			if (!right) {
				return this._dropSpan();
			}
			
			expr = constructor(this._peekSpan(), expr, operator, right);
		}
		
		this._dropSpan();
		return expr;
	}
	
	// Parse an or expression.
	_parseOrExpr() {
		return this._parseBinaryExpr(LogicalExprNode, this._OR_OPS, this._parseAndExpr);
	}
	
	// Parse an and expression.
	_parseAndExpr() {
		return this._parseBinaryExpr(LogicalExprNode, this._AND_OPS, this._parseEqualityExpr);
	}
	
	// Parse an equality expression.
	_parseEqualityExpr() {
		return this._parseBinaryExpr(BinaryExprNode, this._EQUALITY_OPS, this._parseComparisonExpr);
	}
	
	// Parse a comparison expression.
	_parseComparisonExpr() {
		return this._parseBinaryExpr(BinaryExprNode, this._COMPARISON_OPS, this._parseTermExpr);
	}
	
	// Parse a term expression.
	_parseTermExpr() {
		return this._parseBinaryExpr(BinaryExprNode, this._TERM_OPS, this._parseFactorExpr);
	}
	
	// Parse a factor expression.
	_parseFactorExpr() {
		return this._parseBinaryExpr(BinaryExprNode, this._FACTOR_OPS, this._parseUnaryExpr);
	}
	
	// Parse a unary expression.
	_parseUnaryExpr() {
		this._pushSpanNext();
		
		if (this._is(TokenType.BANG) or this._is(TokenType.MINUS)) {
			var operator = this._advance().getType();
			var right = this._parseUnaryExpr();
			
			if (!right) {
				return this._dropSpan();
			}
			
			return UnaryExprNode(this._popSpan(), operator, right);
		}
		
		this._dropSpan();
		return this._parseCallExpr();
	}
	
	// Parse a call expression.
	_parseCallExpr() {
		this._pushSpanNext();
		var expr = this._parsePrimaryExpr();
		
		if (!expr) {
			return this._dropSpan();
		}
		
		for (var isLooping = true; isLooping;) {
			if (this._accept(TokenType.LEFT_PAREN)) {
				var arguments = List();
				
				if (!this._is(TokenType.RIGHT_PAREN)) {
					for (var isLooping = true; isLooping;) {
						if (arguments.getLength() >= 255) {
							this._throwError("Can't have more than 255 arguments.");
							return this._dropSpan();
						}
						
						var expr = this._parseExpression();
						
						if (!expr) {
							return this._dropSpan();
						}
						
						arguments.pushBack(expr);
						
						if (!this._accept(TokenType.COMMA)) {
							isLooping = false;
						}
					}
				}
				
				if (!this._expect(TokenType.RIGHT_PAREN, "after arguments")) {
					return this._dropSpan();
				}
				
				expr = CallExprNode(this._peekSpan(), expr, arguments);
			} else if (this._accept(TokenType.DOT)) {
				var name = this._expect(TokenType.IDENTIFIER, "for property name");
				
				if (!name) {
					return this._dropSpan();
				}
				
				expr = GetExprNode(this._peekSpan(), expr, name.getValue());
			} else {
				isLooping = false;
			}
		}
		
		this._dropSpan();
		return expr;
	}
	
	// Parse a primary expression.
	_parsePrimaryExpr() {
		this._pushSpanNext();
		
		if (this._accept(TokenType.NIL)) {
			return LiteralExprNode(this._popSpan(), Literal(LiteralType.NIL, nil));
		} else if (this._accept(TokenType.TRUE)) {
			return LiteralExprNode(this._popSpan(), Literal(LiteralType.BOOL, true));
		} else if (this._accept(TokenType.FALSE)) {
			return LiteralExprNode(this._popSpan(), Literal(LiteralType.BOOL, false));
		} else if (this._is(TokenType.NUMBER)) {
			var value = this._advance();
			return LiteralExprNode(this._popSpan(), Literal(LiteralType.NUMBER, value.getValue()));
		} else if (this._is(TokenType.STRING)) {
			var value = this._advance();
			return LiteralExprNode(this._popSpan(), Literal(LiteralType.STRING, value.getValue()));
		} else if (this._accept(TokenType.SUPER)) {
			if (!this._expect(TokenType.DOT, "after 'super'")) {
				return this._dropSpan();
			}
			
			var method = this._expect(TokenType.IDENTIFIER, "for superclass method");
			
			if (!method) {
				return this._dropSpan();
			}
			
			return SuperExprNode(this._popSpan(), method.getValue());
		} else if (this._accept(TokenType.THIS)) {
			return ThisExprNode(this._popSpan());
		} else if (this._is(TokenType.IDENTIFIER)) {
			var name = this._advance();
			return VariableExprNode(this._popSpan(), name.getValue());
		} else if (this._accept(TokenType.LEFT_PAREN)) {
			var expression = this._parseExpression();
			
			if (!expression) {
				return this._dropSpan();
			}
			
			if (!this._expect(TokenType.RIGHT_PAREN, "after expression")) {
				return this._dropSpan();
			}
			
			return GroupingExprNode(this._popSpan(), expression);
		} else {
			this._expected("an expression");
			return this._dropSpan();
		}
	}
	
	// Get whether the parser's next token is a token type.
	_is(type) {
		return this._next.getType() == type;
	}
	
	// Advance to the parser's next token.
	_advance() {
		var current = this._next;
		
		if (current.getType() != TokenType.EOF) {
			this._span = current.getSpan();
			this._next = this._scanner.scanToken();
		}
		
		return current;
	}
	
	// Advance to the parser's next token if it is a token type.
	_accept(type) {
		if (this._is(type)) {
			return this._advance();
		} else {
			return nil;
		}
	}
	
	// Push a new node span at the parser's current span.
	_pushSpan() {
		this._spanStack.pushBack(this._span);
	}
	
	// Push a new node span at the parser's next token.
	_pushSpanNext() {
		this._spanStack.pushBack(this._next.getSpan());
	}
	
	// Peek the current node span to the parser's current span.
	_peekSpan() {
		var span = this._spanStack.peekBack().clone();
		span.include(this._span);
		return span;
	}
	
	// Pop the current node span to the parser's current span.
	_popSpan() {
		var span = this._spanStack.popBack().clone();
		span.include(this._span);
		return span;
	}
	
	// Drop the current node span and return nil.
	_dropSpan() {
		this._spanStack.popBack();
		return nil;
	}
	
	// Log an error message at a token's span.
	_logError(message, token) {
		this._log.logErrorAt(message, token.getSpan());
	}
	
	// Throw an error with a message at the parser's next token.
	_throwError(message) {
		if (this._isThrowing) {
			return;
		}
		
		this._isThrowing = true;
		this._logError(message, this._next);
	}
	
	// Catch an error.
	_catchError() {
		if (!this._isThrowing) {
			return false;
		}
		
		this._isThrowing = false;
		var current = this._advance();
		
		while (!this._is(TokenType.EOF)) {
			if (
					current.getType() == TokenType.SEMICOLON
					or this._is(TokenType.CLASS)
					or this._is(TokenType.FOR)
					or this._is(TokenType.FUN)
					or this._is(TokenType.IF)
					or this._is(TokenType.PRINT)
					or this._is(TokenType.RETURN)
					or this._is(TokenType.VAR)
					or this._is(TokenType.WHILE)
					or this._is(TokenType.HASH_IMPORT)) {
				return true;
			}
			
			current = this._advance();
		}
		
		return true;
	}
	
	// Throw an expectation error.
	_expected(what) {
		this._throwError("Expected " + what + ", found " + this._next.toString() + ".");
	}
	
	// Advance to the parser's next token if it is an expected token type.
	_expect(type, where) {
		var current = this._accept(type);
		
		if (!current) {
			this._expected(TokenType.toString(type) + " " + where);
		}
		
		return current;
	}
}
