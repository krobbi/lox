// Parses a module AST from an input stream.
class Parser {
	// Initialize the parser from its configuration, file name, and input
	// stream.
	init(config, name, stream) {
		// The parser's log.
		this._log = config.getLog();
		
		// The parser's scanner.
		this._scanner = Scanner(config, name, stream);
		
		// The parser's current span.
		this._span = Span(name);
		
		// The parser's stack of node spans.
		this._spanStack = List();
		
		// The parser's next token.
		this._next = this._scanner.scanToken();
		
		// Whether the parser is throwing an error.
		this._isThrowing = false;
		
		// The parser's equality operators.
		this._equalityOperators = List();
		this._equalityOperators.pushBack(TokenType.BANG_EQUAL);
		this._equalityOperators.pushBack(TokenType.EQUAL_EQUAL);
		
		// The parser's comparison operators.
		this._comparisonOperators = List();
		this._comparisonOperators.pushBack(TokenType.GREATER);
		this._comparisonOperators.pushBack(TokenType.GREATER_EQUAL);
		this._comparisonOperators.pushBack(TokenType.LESS);
		this._comparisonOperators.pushBack(TokenType.LESS_EQUAL);
		
		// The parser's term operators.
		this._termOperators = List();
		this._termOperators.pushBack(TokenType.MINUS);
		this._termOperators.pushBack(TokenType.PLUS);
		
		// The parser's factor operators.
		this._factorOperators = List();
		this._factorOperators.pushBack(TokenType.SLASH);
		this._factorOperators.pushBack(TokenType.STAR);
	}
	
	// Parse a module.
	parseModule() {
		this._pushSpan();
		var statements = List();
		
		while (!this._is(TokenType.EOF)) {
			var statement = this._parseDeclaration();
			
			if (statement) {
				statements.pushBack(statement);
			}
		}
		
		return ModuleNode(this._popSpan(), statements);
	}
	
	// Parse a declaration.
	_parseDeclaration() {
		var statement = this._parseStatement();
		
		if (this._catchError()) {
			return nil;
		}
		
		return statement;
	}
	
	// Parse a statement.
	_parseStatement() {
		return this._parseExprStmt();
	}
	
	// Parse an expression statement.
	_parseExprStmt() {
		this._pushSpan();
		var expression = this._parseExpression();
		
		if (!expression) {
			return this._dropSpan();
		}
		
		if (!this._expect(TokenType.SEMICOLON, "after expression")) {
			return this._dropSpan();
		}
		
		return ExprStmtNode(this._popSpan(), expression);
	}
	
	// Parse an expression.
	_parseExpression() {
		return this._parseEqualityExpr();
	}
	
	// Parse a binary expression.
	_parseBinaryExpr(operators, parser) {
		this._pushSpan();
		var expr = parser();
		
		if (!expr) {
			return this._dropSpan();
		}
		
		while (operators.has(this._next.getType())) {
			var operator = this._advance().getType();
			var right = parser();
			
			if (!right) {
				return this._dropSpan();
			}
			
			expr = BinaryExprNode(this._peekSpan(), expr, operator, right);
		}
		
		this._dropSpan();
		return expr;
	}
	
	// Parse an equality expression.
	_parseEqualityExpr() {
		return this._parseBinaryExpr(this._equalityOperators, this._parseComparisonExpr);
	}
	
	// Parse a comparison expression.
	_parseComparisonExpr() {
		return this._parseBinaryExpr(this._comparisonOperators, this._parseTermExpr);
	}
	
	// Parse a term expression.
	_parseTermExpr() {
		return this._parseBinaryExpr(this._termOperators, this._parseFactorExpr);
	}
	
	// Parse a factor expression.
	_parseFactorExpr() {
		return this._parseBinaryExpr(this._factorOperators, this._parseUnaryExpr);
	}
	
	// Parse a unary expression.
	_parseUnaryExpr() {
		this._pushSpan();
		
		if (this._is(TokenType.BANG) or this._is(TokenType.MINUS)) {
			var operator = this._advance().getType();
			var right = this._parseUnaryExpr();
			
			if (!right) {
				return this._dropSpan();
			}
			
			return UnaryExprNode(this._popSpan(), operator, right);
		}
		
		this._dropSpan();
		return this._parseCallExpr();
	}
	
	// Parse a call expression.
	_parseCallExpr() {
		this._pushSpan();
		var expr = this._parsePrimaryExpr();
		
		if (!expr) {
			return this._dropSpan();
		}
		
		for (var isLooping = true; isLooping;) {
			if (this._accept(TokenType.LEFT_PAREN)) {
				var arguments = List();
				
				if (!this._is(TokenType.RIGHT_PAREN)) {
					for (var isLooping = true; isLooping;) {
						if (arguments.getLength() >= 255) {
							this._throwError("Can't have more than 255 arguments.");
							return this._dropSpan();
						}
						
						var expr = this._parseExpression();
						
						if (!expr) {
							return this._dropSpan();
						}
						
						arguments.pushBack(expr);
						
						if (!this._accept(TokenType.COMMA)) {
							isLooping = false;
						}
					}
				}
				
				if (!this._expect(TokenType.RIGHT_PAREN, "after arguments")) {
					return this._dropSpan();
				}
				
				expr = CallExprNode(this._peekSpan(), expr, arguments);
			} else if (this._accept(TokenType.DOT)) {
				var token = this._expect(TokenType.IDENTIFIER, "for property name");
				
				if (!token) {
					return this._dropSpan();
				}
				
				expr = GetExprNode(this._peekSpan(), expr, token.getValue());
			} else {
				isLooping = false;
			}
		}
		
		this._dropSpan();
		return expr;
	}
	
	// Parse a primary expression.
	_parsePrimaryExpr() {
		this._pushSpan();
		
		if (this._accept(TokenType.NIL)) {
			return LiteralExprNode(this._popSpan(), Literal(LiteralType.NIL, nil));
		} else if (this._accept(TokenType.TRUE)) {
			return LiteralExprNode(this._popSpan(), Literal(LiteralType.BOOL, true));
		} else if (this._accept(TokenType.FALSE)) {
			return LiteralExprNode(this._popSpan(), Literal(LiteralType.BOOL, false));
		} else if (this._is(TokenType.NUMBER)) {
			var token = this._advance();
			return LiteralExprNode(this._popSpan(), Literal(LiteralType.NUMBER, token.getValue()));
		} else if (this._is(TokenType.STRING)) {
			var token = this._advance();
			return LiteralExprNode(this._popSpan(), Literal(LiteralType.STRING, token.getValue()));
		} else if (this._accept(TokenType.SUPER)) {
			if (!this._expect(TokenType.DOT, "after 'super'")) {
				return this._dropSpan();
			}
			
			var token = this._expect(TokenType.IDENTIFIER, "for superclass method");
			
			if (!token) {
				return this._dropSpan();
			}
			
			return SuperExprNode(this._popSpan(), token.getValue());
		} else if (this._accept(TokenType.THIS)) {
			return ThisExprNode(this._popSpan());
		} else if (this._is(TokenType.IDENTIFIER)) {
			var token = this._advance();
			return VariableExprNode(this._popSpan(), token.getValue());
		} else if (this._accept(TokenType.LEFT_PAREN)) {
			var expression = this._parseExpression();
			
			if (!expression) {
				return this._dropSpan();
			}
			
			if (!this._expect(TokenType.RIGHT_PAREN, "after expression")) {
				return this._dropSpan();
			}
			
			return GroupingExprNode(this._popSpan(), expression);
		} else {
			this._expected("an expression");
			return this._dropSpan();
		}
	}
	
	// Get whether the parser's next token is a token type.
	_is(type) {
		return this._next.getType() == type;
	}
	
	// Advance to the parser's next token.
	_advance() {
		var current = this._next;
		
		if (current.getType() != TokenType.EOF) {
			this._span = current.getSpan();
			this._next = this._scanner.scanToken();
		}
		
		return current;
	}
	
	// Advance to the parser's next token if it is a token type.
	_accept(type) {
		if (this._is(type)) {
			return this._advance();
		} else {
			return nil;
		}
	}
	
	// Push a new node span at the parser's next token.
	_pushSpan() {
		this._spanStack.pushBack(this._next.getSpan());
	}
	
	// Peek the current node span to the parser's current span.
	_peekSpan() {
		var span = this._spanStack.peekBack().clone();
		span.include(this._span);
		return span;
	}
	
	// Pop the current node span to the parser's current span.
	_popSpan() {
		var span = this._spanStack.popBack().clone();
		span.include(this._span);
		return span;
	}
	
	// Drop the current node span and return nil.
	_dropSpan() {
		this._spanStack.popBack();
		return nil;
	}
	
	// Throw an error with a message at the parser's next token.
	_throwError(message) {
		if (this._isThrowing) {
			return;
		}
		
		this._isThrowing = true;
		this._log.logErrorAt(message, this._next.getSpan());
	}
	
	// Catch an error.
	_catchError() {
		if (!this._isThrowing) {
			return false;
		}
		
		this._isThrowing = false;
		var current = this._advance();
		
		while (!this._is(TokenType.EOF)) {
			if (
					current.getType() == TokenType.SEMICOLON
					or this._is(TokenType.CLASS)
					or this._is(TokenType.FOR)
					or this._is(TokenType.FUN)
					or this._is(TokenType.IF)
					or this._is(TokenType.PRINT)
					or this._is(TokenType.RETURN)
					or this._is(TokenType.VAR)
					or this._is(TokenType.WHILE)
					or this._is(TokenType.HASH_IMPORT)) {
				return true;
			}
			
			current = this._advance();
		}
		
		return true;
	}
	
	// Throw an expectation error.
	_expected(what) {
		this._throwError("Expected " + what + ", found " + this._next.toString() + ".");
	}
	
	// Advance to the parser's next token if it is an expected token type.
	_expect(type, where) {
		var current = this._accept(type);
		
		if (!current) {
			this._expected(TokenType.toString(type) + " " + where);
		}
		
		return current;
	}
}
