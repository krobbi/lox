// #import "/ast/literal/literal.lox"
// #import "/ast/literal/literal_type.lox"
// #import "token_type.lox"

// A token of Lox code.
class Token {
	// Initialize the token from its token type, value, and span.
	init(type, value, span) {
		// The token's token type.
		this._type = type;
		
		// The token's value.
		this._value = value;
		
		// The token's span.
		this._span = span;
	}
	
	// Get the token's token type.
	getType() {
		return this._type;
	}
	
	// Get the token's value.
	getValue() {
		return this._value;
	}
	
	// Get the token's span.
	getSpan() {
		return this._span;
	}
	
	// Get the token's lexeme.
	getLexeme() {
		var type = this._type;
		
		if (type == TokenType.IDENTIFIER) {
			return this._value;
		} else if (type == TokenType.STRING) {
			var quote = __strof(Char.QUOTE);
			return quote + this._value + quote;
		} else if (type == TokenType.NUMBER) {
			return __ftoa(this._value);
		} else {
			return TokenType.getLexeme(type);
		}
	}
	
	// Represent the token as a string.
	toString() {
		var type = this._type;
		var value = this._value;
		
		if (type == TokenType.STRING) {
			value = Literal(LiteralType.STRING, value).toString();
		} else if (type == TokenType.NUMBER) {
			value = __ftoa(value);
		}
		
		type = TokenType.toString(type);
		
		if (value) {
			return type + " '" + value + "'";
		} else {
			return type;
		}
	}
}
