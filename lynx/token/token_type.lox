// An enumeration of token types.
class TokenType {
	// Initialize the token type enumeration.
	init() {
		// A map of token types to names.
		this._typeNames = Map();
		
		// A map of token types to lexemes.
		this._typeLexemes = Map();
		
		// A map of characters to token types.
		this._charTypes = Map();
		
		// A map of keyword lexemes to token types.
		this._keywordTypes = Map();
		
		// A map of directive keywords to token types.
		this._directiveTypes = Map();
		
		var count = 0;
		
		// Define a token type from its name and lexeme.
		fun defineToken(name, lexeme) {
			var type = (count = count + 1) - 1;
			
			if (name) {
				this._typeNames.set(type, name);
			}
			
			if (lexeme) {
				this._typeLexemes.set(type, lexeme);
			}
			
			return type;
		}
		
		// Define a literal token type from its name.
		fun defineLiteral(name) {
			return defineToken(name, nil);
		}
		
		// Define a fixed-lexeme token type from its lexeme.
		fun defineFixed(lexeme) {
			return defineToken(nil, lexeme);
		}
		
		// Define a single-character token type from its lexeme.
		fun defineChar(lexeme) {
			var type = defineFixed(lexeme);
			this._charTypes.set(__chrat(lexeme, 0), type);
			return type;
		}
		
		// Define a keyword token type from its lexeme.
		fun defineKeyword(lexeme) {
			var type = defineFixed(lexeme);
			this._keywordTypes.set(lexeme, type);
			return type;
		}
		
		// Define a directive token type from its keyword.
		fun defineDirective(keyword) {
			var type = defineFixed("#" + keyword);
			this._directiveTypes.set(keyword, type);
			return type;
		}
		
		// A `(` token's type.
		this.LEFT_PAREN = defineChar("(");
		
		// A `)` token's type.
		this.RIGHT_PAREN = defineChar(")");
		
		// A `{` token's type.
		this.LEFT_BRACE = defineChar("{");
		
		// A `}` token's type.
		this.RIGHT_BRACE = defineChar("}");
		
		// A `,` token's type.
		this.COMMA = defineChar(",");
		
		// A `.` token's type.
		this.DOT = defineChar(".");
		
		// A `-` token's type.
		this.MINUS = defineChar("-");
		
		// A `+` token's type.
		this.PLUS = defineChar("+");
		
		// A `;` token's type.
		this.SEMICOLON = defineChar(";");
		
		// A `/` token's type.
		this.SLASH = defineFixed("/"); // May be scanned before a comment.
		
		// A `*` token's type.
		this.STAR = defineChar("*");
		
		// A `!` token's type.
		this.BANG = defineFixed("!"); // May be scanned before `!=`.
		
		// A `!=` token's type.
		this.BANG_EQUAL = defineFixed("!=");
		
		// An `=` token's type.
		this.EQUAL = defineFixed("="); // May be scanned before `==`.
		
		// An `==` token's type.
		this.EQUAL_EQUAL = defineFixed("==");
		
		// A `>` token's type.
		this.GREATER = defineFixed(">"); // May be scanned before `>=`.
		
		// A `>=` token's type.
		this.GREATER_EQUAL = defineFixed(">=");
		
		// A `<` token's type.
		this.LESS = defineFixed("<"); // May be scanned before `<=`.
		
		// A `<=` token's type.
		this.LESS_EQUAL = defineFixed("<=");
		
		// An identifier token's type.
		this.IDENTIFIER = defineLiteral("identifier");
		
		// A string token's type.
		this.STRING = defineLiteral("string");
		
		// A number token's type.
		this.NUMBER = defineLiteral("number");
		
		// An `and` token's type.
		this.AND = defineKeyword("and");
		
		// A `class` token's type.
		this.CLASS = defineKeyword("class");
		
		// An `else` token's type.
		this.ELSE = defineKeyword("else");
		
		// A `false` token's type.
		this.FALSE = defineKeyword("false");
		
		// A `for` token's type.
		this.FOR = defineKeyword("for");
		
		// A `fun` token's type.
		this.FUN = defineKeyword("fun");
		
		// An `if` token's type.
		this.IF = defineKeyword("if");
		
		// A `nil` token's type.
		this.NIL = defineKeyword("nil");
		
		// An `or` token's type.
		this.OR = defineKeyword("or");
		
		// A `print` token's type.
		this.PRINT = defineKeyword("print");
		
		// A `return` token's type.
		this.RETURN = defineKeyword("return");
		
		// A `super` token's type.
		this.SUPER = defineKeyword("super");
		
		// A `this` token's type.
		this.THIS = defineKeyword("this");
		
		// A `true` token's type.
		this.TRUE = defineKeyword("true");
		
		// A `var` token's type.
		this.VAR = defineKeyword("var");
		
		// A `while` token's type.
		this.WHILE = defineKeyword("while");
		
		// A whitespace, comment, or syntax error token's type.
		this.ERROR = defineLiteral("error");
		
		// An end-of-file token's type.
		this.EOF = defineLiteral("end-of-file");
		
		// A `#import` token's type.
		this.HASH_IMPORT = defineDirective("import");
	}
	
	// Get a token type from a character.
	fromChar(char) {
		return this._charTypes.get(char);
	}
	
	// Get a token type from a keyword lexeme.
	fromKeyword(lexeme) {
		return this._keywordTypes.get(lexeme);
	}
	
	// Get a token type from a directive keyword.
	fromDirective(keyword) {
		return this._directiveTypes.get(keyword);
	}
	
	// Get a token type's lexeme.
	getLexeme(type) {
		return this._typeLexemes.get(type);
	}
	
	// Represent a token type as a string.
	toString(type) {
		var lexeme = this._typeLexemes.get(type);
		
		if (lexeme) {
			return "'" + lexeme + "'";
		} else {
			return this._typeNames.getDefault(type, "unknown");
		}
	}
}

// The enumeration of token types.
var TokenType = TokenType();
