// Test string manipulation extensions.

// The number of tests that have been run.
var tests = 0;

// The number of tests that have been passed.
var passed = 0;

// Test whether two values are equal.
fun assertEq(a, b) {
	tests = tests + 1;
	
	if (a == b) {
		passed = passed + 1;
	}
}

// Reverse a string by bytes.
fun reverse(text) {
	var result = "";
	
	for (var i = __strlen(text) - 1; i >= 0; i = i - 1) {
		result = result + __strof(__chrat(text, i));
	}
	
	return result;
}

assertEq("foo" + " " + "bar", "foo bar"); // String equality works by value.

// Test __strlen:
assertEq(__strlen("line"), 4); // String length can be measured.
assertEq(__strlen("café"), 5); // String length measures bytes.
assertEq(__strlen(""), 0); // Empty string length can be measured.
assertEq(__strlen(nil), nil); // Unexpected nil.
assertEq(__strlen(true), nil); // Unexpected true.
assertEq(__strlen(false), nil); // Unexpected false.
assertEq(__strlen(123), nil); // Unexpected number.
assertEq(__strlen(reverse), nil); // Unexpected object.
assertEq(__strlen(), nil); // Not enough arguments.
assertEq(__strlen("Hello", "world"), nil); // Too many arguments.

// Test __strof:
assertEq(__strof(32), " "); // Can create character strings from bytes.
assertEq(__strof(65), "A"); // Second test.
assertEq(__strof(66.4), "B"); // Byte is rounded.
assertEq(__strof(67.8), "C"); // Byte is rounded down.
assertEq(__strof(0), nil); // Can't create null character string.
assertEq(__strof(-100), nil); // Can't create string below byte range.
assertEq(__strof(256), nil); // Can't create string above byte range.
assertEq(__strof(18537), nil); // Can't create multi-byte string.
assertEq(__strlen(__strof(1)), 1); // Lowest valid case.
assertEq(__strlen(__strof(255)), 1); // Highest valid case.
assertEq(__strof(nil), nil); // Unexpected nil.
assertEq(__strof(true), nil); // Unexpected true.
assertEq(__strof(false), nil); // Unexpected false.
assertEq(__strof("A"), nil); // Unexpected string.
assertEq(__strof(reverse), nil); // Unexpected object.
assertEq(__strof(), nil); // Not enough arguments.
assertEq(__strof(65, 66), nil); // Too many arguments.

// Test __chrat:
assertEq(__chrat("ABC", 0), 65); // Can get first character of string.
assertEq(__chrat("Hi!", 1), 105); // Can get middle character of string.
assertEq(__chrat("Bye!", 3), 33); // Can get last character of string.
assertEq(__chrat("é", 0), 195); // Can get first byte of 2-byte character.
assertEq(__chrat("é", 1), 169); // Can get second byte of 2-byte character.
assertEq(__chrat("", 0), nil); // Can't get character from empty string.
assertEq(__chrat("", -1), nil); // Can't get character below empty string.
assertEq(__chrat("", 1), nil); // Can't get character above empty string.
assertEq(__chrat("As above", 8), nil); // Can't get character above range.
assertEq(__chrat("So below", -1), nil); // Can't get character below range.
assertEq(__chrat(0, "Oops!"), nil); // Arguments reversed.
assertEq(__chrat(nil, 0), nil); // Unexpected nil in first argument.
assertEq(__chrat(true, 0), nil); // Expected true in first argument.
assertEq(__chrat(false, 0), nil); // Unexpected false in first argument.
assertEq(__chrat(123, 0), nil); // Unexpected number in first argument.
assertEq(__chrat(reverse, 0), nil); // Unexpected object in first argument.
assertEq(__chrat("bad", nil), nil); // Unexpected nil in second argument.
assertEq(__chrat("bad", true), nil); // Unexpected true in second argument.
assertEq(__chrat("bad", false), nil); // Unexpected false in second argument.
assertEq(__chrat("bad", "worse"), nil); // Unexpected string in second argument.
assertEq(__chrat("bad", reverse), nil); // Unexpected object in second argument.
assertEq(__chrat("Range", 1, 2), nil); // Too many arguments.
assertEq(__chrat("None"), nil); // Not enough arguments.
assertEq(__chrat(), nil); // Not enough arguments.

assertEq(reverse("Backwards!"), "!sdrawkcaB"); // Practical test.

if (passed == tests) {
	print "OK!";
} else {
	print "Error!";
}
